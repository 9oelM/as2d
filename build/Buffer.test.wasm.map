{"version":3,"sources":["~lib/internal/allocator.ts","~lib/internal/arraybuffer.ts","assembly/renderer/CanvasRenderingContext2D.ts","~lib/internal/typedarray.ts","~lib/memory.ts","~lib/allocator/arena.ts","~lib/internal/memory.ts","~lib/map.ts","~lib/arraybuffer.ts","assembly/internal/getContext.ts","assembly/internal/Buffer.ts","src/shared/CanvasDirection.ts","src/shared/GlobalCompositeOperation.ts","src/shared/ImageSmoothingQuality.ts","src/shared/LineCap.ts","src/shared/LineJoin.ts","src/shared/TextAlign.ts","src/shared/TextBaseline.ts","~lib/array.ts","assembly/internal/Path2DElement.ts","~lib/internal/hash.ts","~lib/internal/string.ts","~lib/string.ts","assembly/renderer/Image.ts","assembly/Buffer.test.ts"],"names":[],"mappings":"s/BCiB6E,AAApE,EAAY,AAAQ,EAAU,AAAS,EAAa,GAAc,WIAzE,AAAI,EAAO,KAAa,EACxB,AAAU,IACV,AAAa,AAAC,EAAM,AAAW,IAAM,WAAK,GAAW,AAAC,QACtD,AAAkB,IAClB,AAAI,EAAS,EAAsB,MACjC,AAAkB,AAAC,AAAC,EAAS,GAAM,KAAU,AAAC,QAAY,KAC1D,AAAkB,AAAI,IAAa,YACnC,AAAI,AAAY,IAAe,KAAG,AAC5B,AAAY,IAAe,KAAG,IAKtC,AAAS,IACF,OJNP,AAAO,EAAmB,mBAE1B,AAGW,EAAgB,AAAY,MGSrC,AAAyC,AAAkB,SHP7D,AAAW,EAAQ,KACkB,UK6JrC,AAAI,AAAC,KAAG,EACR,AAAU,EAAM,KAChB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAAG,EAEZ,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAAG,EACZ,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAAG,EAGZ,AAAe,EAAC,GAAO,KACvB,EAAQ,KACR,EAAK,KACL,EAAK,KAEL,AAAe,EAAU,IAAM,SAG/B,AAAW,EAAM,KACjB,AAAW,EAAO,GAAI,GAAG,KACzB,AAAI,EAAK,KAAG,EACZ,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAG,KACzB,AAAI,EAAK,KAAI,EACb,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAC1B,AAAW,EAAO,GAAI,GAAI,KAG1B,AAAI,EAAK,AAAC,EAAO,MACjB,EAAQ,KACR,EAAK,KAGL,AAAe,GAAW,AAAC,GAAY,MACvC,IAAO,EAAK,KAAI,EACd,AAAW,EAAM,KACjB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,EAAK,KACL,EAAQ,cF5MR,AAAyC,AAAkB,UDjB3D,AAAI,EAAc,qBAClB,AAAiB,EAAU,KAC3B,AAAa,AAAe,MAC5B,EAAY,EAA4B,KAAgB,IAAG,ICX3D,AAAO,EAAM,EAAG,KDYhB,sCAAc,KACd,EAAkB,KAClB,EAAkB,qCKkBlB,AAAI,EAAc,kBAClB,AAAa,AAAe,MAC5B,AAAI,AAAC,QAAoB,EAA4B,KAAa,IAAG,IJlCrE,AAAO,EAAM,EAAG,KImCT,KDWP,EAAe,EAAgB,ECfO,ODgBtC,EAAmB,EAAmB,MAEtC,EAAe,EAAgB,EAAa,OAC5C,EAAuB,KACvB,EAAqB,KACrB,EAAoB,QAVN,gFGrCiB,EAAgB,IAAU,GAAe,SAKnD,eR+CvB,EAAW,IAAM,IAAG,gCACpB,EAAW,IAAM,IAAG,gCACpB,EAAW,IAAM,IAAG,gCACpB,EAAW,IAAM,IAAG,gCACpB,EAAW,IAAM,IAAG,gCACpB,EAAW,IAAM,IAAG,WDKkF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCLlF,OAWP,EAAS,IAAM,IAAG,IDPoF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCOlF,OAWP,EAAS,IAAM,IAAG,yBAClB,EAAS,IAAM,IAAG,IDpBoF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCoBlF,OAdP,EAAS,IAAM,IAAG,IDPoF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCOlF,SADP,EAAS,IAAM,IAAG,IDPoF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCOlF,OADP,EAAS,IAAM,IAAG,IDPoF,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MCOlF,OgB7CL,AAAI,EAAc,sBAClB,AAAiB,EAAU,KAC3B,AAAa,AAAe,MAC5B,+BAAe,KACf,EAAe,KACf,EACE,EAA4B,KAC5B,IACA,IdtCF,AAAO,EAAM,EAAG,0BeXe,OACf,cACA,cACA,cACA,cACA,cACA,cACL,OACW,OACf,cACA,cACA,cACA,cACA,cACA,cACA,cACA,oBbdT,IAAO,IAAK,AAAC,EAAM,SAAI,EACrB,AAAU,cAAQ,AAAS,oBAC3B,aAIF,AAAI,AAAC,EAAO,GAAM,KAChB,IAAO,EAAK,KAAI,EACd,AAAW,EAAW,AAAU,QAChC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAO,GAAI,AAAU,EAAM,SACtC,EAAO,KAAI,EAAQ,KAAI,EAAK,WAE9B,AAAI,EAAI,KACN,AAAW,EAAU,AAAU,QAC/B,AAAW,EAAO,GAAG,AAAU,EAAM,SACrC,EAAQ,KAAG,EAAO,MAEpB,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAC3B,EAAQ,KAAG,EAAO,MAEpB,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAC3B,EAAQ,KAAG,EAAO,MAEpB,AAAI,EAAI,KAAG,AACC,cAAQ,AAAS,qBAE7B,EAKF,AAAI,EAAK,KAAI,QACH,EAAO,OAER,OAmBA,OAkBA,QArCG,EACN,AAAI,AAAU,OACd,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,EAAK,KACL,IAAO,EAAK,KAAI,EACd,AAAI,AAAU,EAAM,QACpB,AAAW,EAAM,EAAK,GAAK,EAAK,OAChC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAK,EAAK,OACpC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAK,EAAK,OACpC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAI,EAAK,GAAK,EAAK,OACrC,EAAO,KAAI,EAAQ,KAAI,EAAK,WAE9B,MAEM,EACN,AAAI,AAAU,OACd,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,EAAK,KACL,IAAO,EAAK,KAAI,EACd,AAAI,AAAU,EAAM,QACpB,AAAW,EAAM,EAAK,GAAK,EAAK,OAChC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAK,EAAK,OACpC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAK,EAAK,OACpC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAI,EAAK,GAAK,EAAK,OACrC,EAAO,KAAI,EAAQ,KAAI,EAAK,WAE9B,MAEM,EACN,AAAI,AAAU,OACd,AAAU,cAAQ,AAAS,oBAC3B,EAAK,KACL,IAAO,EAAK,KAAI,EACd,AAAI,AAAU,EAAM,QACpB,AAAW,EAAM,EAAK,GAAI,EAAK,OAC/B,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAI,EAAK,OACnC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAG,EAAK,GAAI,EAAK,OACnC,AAAI,AAAU,EAAM,QACpB,AAAW,EAAO,GAAI,EAAK,GAAI,EAAK,OACpC,EAAO,KAAI,EAAQ,KAAI,EAAK,WAE9B,OAMN,AAAI,EAAI,KACN,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,qBAE7B,AAAI,EAAI,KACN,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,qBAE7B,AAAI,EAAI,KACN,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,qBAE7B,AAAI,EAAI,KACN,AAAU,cAAQ,AAAS,oBAC3B,AAAU,cAAQ,AAAS,qBAE7B,AAAI,EAAI,KAAG,AACC,cAAQ,AAAS,2BAM7B,AAAI,EAAS,KAAK,EAClB,AAAI,EAAM,GAAK,UAAQ,EAAO,GAAK,MACjC,AAAO,EAAM,EAAK,IAClB,EAEF,AAAI,EAAO,KACT,AAAI,AAAC,EAAM,GAAM,AAAC,EAAO,MACvB,IAAO,EAAO,KAAG,EACf,AAAI,AAAC,KAAG,EACR,AAAE,OACF,AAAU,cAAQ,AAAS,0BAE7B,IAAO,EAAK,KAAG,EACb,AAAW,EAAM,AAAU,QAC3B,EAAQ,KACR,EAAQ,KACR,EAAQ,YAGZ,IAAO,IAAG,EACR,AAAU,cAAQ,AAAS,oBAC3B,AAAE,cAGJ,AAAI,AAAC,EAAM,GAAM,AAAC,EAAO,MACvB,IAAO,AAAC,EAAO,GAAK,KAAG,EACrB,AAAI,AAAC,KAAG,EACR,AAAU,EAAO,AAAE,QAAG,AAAS,EAAM,eAEvC,IAAO,EAAK,KAAG,EACb,EAAK,KACL,AAAW,EAAO,GAAG,AAAU,EAAM,gBAGzC,IAAO,IAAG,AACE,EAAO,AAAE,QAAG,AAAS,EAAM,yBLhJzC,AAAoB,OACpB,AAAI,EAAgB,KAClB,AAAO,EAAiB,mBACxB,AAAI,EAAiB,AAAM,AAAY,IAAiB,MAAc,AACzD,EAA2B,MAEtC,AAAgB,AAAe,MAC/B,EACE,EAA+B,KAC/B,EAA4B,KAC5B,IG5BJ,AAAQ,EAAM,EAAK,KH8BjB,EACc,IGLgB,AAAc,IAAM,GHOlD,AAAS,KAEX,EACE,EAA4B,GAAc,KAC1C,IACA,AAAQ,EAAgB,KG3C1B,AAAO,EAAM,EAAG,MH6CX,AAAI,EAAgB,KAEzB,AAAO,EAAiB,mBACxB,AAAW,EAA2B,OAEjC,OiBsCL,AAAa,OACb,AAAe,KAAsB,KACrC,AAAI,EAAc,KAEhB,AAAI,EAAc,uBAClB,AAAS,AAAiB,EAAQ,AAAC,EAAQ,GAAM,OACjD,EAAe,KACf,EAAe,EAAQ,OAEzB,EAAS,IAAQ,IAAO,IjB9B4E,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,WiBexE,OAAc,IjBpB2D,IACsB,AAA3F,EAA4B,AAAC,EAAgB,IAAgB,WC8BlF,AAA4B,EAAyB,OACrD,EAAK,AAAQ,MAAG,EAAI,OAClB,EAAK,EAAK,MADgB,aAG5B,AAAS,AAAU,EAAK,MACxB,EAAiB,KACjB,EAAW,KACX,EAAqB,KACd,2BAgBW,OAMS,OA6CY,AAAuB,EAAgB,GAAO,GAAgB,cAM5D,AAAuB,EAAgB,EAAgB,cAmG5F,AAAqC,EAAgB,GAAO,OAAI,SAMvB,OAkCN,AACrC,EAAgB,GAAO,GAAkB,OACzC,EACA,SAOmD,OAMb,OA2IJ,AAClC,EAAgB,GAAO,OACvB,SAO+B,OAiCC,AAChC,EAAgB,GAAO,OACvB,SAO6B,OAgCU,AACvC,EAAgB,GAAO,OACvB,gBAOiC,cAkCmB,AACpD,EAAgB,GAAO,OACvB,SAOmE,OAoClB,AACjD,EAAgB,GAAO,OACvB,SAO4C,OAkCK,AACjD,EAAgB,GAAO,OACvB,SAO6D,OAsC1B,AACnC,EAAgB,GAAO,OACvB,SAOiC,OAmCG,AACpC,EAAgB,GAAO,OACvB,SAOuC,OA4DG,AAC1C,EAAgB,GAAO,OACvB,gBAOoC,cAiCA,AACpC,EAAgB,GAAO,OACvB,UAOmC,QAuCE,AACrC,EAAgB,GAAO,OACvB,iBAO+B,eAiCO,AACtC,EAAgB,GAAO,OACvB,iBAOgC,eAkCM,EAAgB,GAAO,aAM7B,eAsCO,AACvC,EAAgB,GAAO,OACvB,UAOoC,QAkCK,EAAgB,GAAO,aAM7B,eAqCM,EAAgB,GAAO,aAM7B,eAuCI,AACvC,EAAgB,GAAO,GAAkB,OACzC,EACA,UAOqD,QAMb,QA4HH,AACrC,EAAgB,GAAO,OACvB,UAOqC,QAsCG,AACxC,EAAgB,GAAO,OACvB,UAO2C,QAmCX,EAAgB,GAAO,GMj3CjB,UNwmDP,QAMN,QAMM,akB/lDjC,AAAQ,IACR,EAAK,EAAe,IAAc,KAAc,QAAG,EAAI,MACrD,AAAI,AAAC,EAAI,AAAc,EAAyB,OAAmB,KADX,AAAE,aAGrD,OC7BP,AAAe,IACf,AAAW,EAA0B,AAAC,EAAW,MACjD,AAAW,EAA0B,AAAC,EAAW,MACjD,IAAO,IAAO,AAAC,AAAO,AAAe,KAAqB,AAAe,eAAqB,EAC5F,AAAE,OAAK,EAAQ,KAAG,EAAQ,WAErB,OCuFL,AAAI,EAAS,KAAc,IAC3B,AAAI,EAAS,UAAQ,EAAU,MAAa,IAE5C,AAAiB,OACjB,AAAI,EAAc,QAAqB,IAEY,AAA3C,AAAc,EAAM,EAAG,EAAO,EAAG,UftEzC,AAAY,AACV,AAAkB,KAAgB,AAAQ,EAAW,MAAoB,SAG3E,IAAO,IAAO,EACZ,AAAI,AAAC,AAAC,KAAmB,QAAU,KAAa,UAAY,IAC5D,AAAQ,AAA0B,KAAmB,AAAC,cAEjD,QA0DP,AAAyB,AAAM,EAAiB,KAChD,AAAiB,EAAgB,EAAqB,GC5FhB,MD6FtC,AAAyB,AAAM,GAAqB,OACpD,AAAiB,EAAgB,EAAqB,MAAwB,MAG9E,AAAa,AAAkB,KAAgB,KAC/C,AAAa,EAAS,AAAO,KAAqB,SAClD,AAAa,EAAgC,KAC7C,IAAO,EAAU,KAAQ,EACvB,AAAe,IACf,AAAI,AAAC,AAAC,KAAsB,MAC1B,AAAe,IACf,EAAe,QACf,EAAiB,QACjB,AAAqB,EAAQ,Oa/InC,AACS,AAAQ,Ob8IkC,KAC7C,AAAuB,EAAgC,EAAwB,MAC/E,EAAsB,AAAY,QAClC,AAAa,EAAkB,KAC/B,EAAU,SAEZ,EAAU,EAtHP,YAyHL,EAAe,KACf,EAAmB,KACnB,EAAe,KACf,EAAuB,KACvB,EAAqB,cAzErB,AAAe,EAAQ,aACvB,AAAY,EAAU,EAAK,MAC3B,AAAI,IAAO,AACT,EAAc,MAGd,AAAI,KAAsB,QAAsB,AAC9C,EACE,KAAoB,AAAM,MAAuB,QAC5C,MACD,AAAC,KAAoB,GAAK,OAIlC,AAAc,OACd,AAAQ,AACN,EAA6B,GAAiB,oBAAuB,EApEpE,OAsEH,EAAY,KACZ,EAAc,KACd,AAAE,aAEF,AAAoB,AAAkB,KAAgB,AAAQ,EAAW,MAAoB,MAC7F,EAAmB,AAAY,QAC/B,AAAa,EAAe,WErGhC,AAAa,MACb,AAAW,EAA4B,GAA0C,KACjF,EAAQ,EAAM,Oc8Bd,AAAW,EAAyB,GAA2B,KAC/D,AAAW,EAAyB,GAA4B,KAChE,AAAY,EAAyB,GAA4B,UjBwMjE,AAAI,EAAM,KAAW,IACrB,IAAO,EAAK,OAAK,AAAS,KAAO,AAAS,YAAK,EAC7C,OAAK,OAAM,aAEsC,AAA5C,IAAI,AAAc,KAAM,AAAc,OAAM,MFrO1B,AAAT,EAAI,EAAI,OAsBU,AAAc,IAAM,ICRtD,AAAS,ODc0B,EAAkB,kBMhCpB,EAAgB,IAAU,GAAe,SAKnD,mCH0DmB,AAAjC,EAAU,EAAK,EAAQ,Ia1EhC,AACS,AAAQ,SbyEyB,QAIxC,AAAY,EAAU,EAAK,EAAQ,Ia9ErC,AACS,AAAQ,Wb8E6B,AAArC,IAAQ,MAAc,KE9D/B,AAAI,AAAC,EAAQ,oBACM,AAAZ,EAAQ,OeTf,AAAM,AAAe,gBANnB,IAAe,WAAG,WAAG,Wd2DrB,AAAwB,OACxB,AAAiB,OACjB,AAAgB,EAAQ,KACxB,EAAW,IAAM,IAAO,yBACxB,EAAW,IAAM,EAAQ,KAAG,0BAC5B,EAAW,IAAM,EAAQ,KAAG,yBAC5B,EAAW,IAAM,EAAQ,KAAG,ITKwE,IACtG,AAAS,EAA4B,AAAC,EAAgB,IAAgB,GAAmB,MSLvF,EAAe,QcxDjB,KAC2D,AAApD,GAA0B,wBtBuCC,EAAiB,MO3D3C,MeaS","sourceRoot":"assemblyscript:///","sourceContents":["/** Number of alignment bits. */\r\nexport const AL_BITS: u32 = 3;\r\n/** Number of possible alignment values. */\r\nexport const AL_SIZE: usize = 1 << <usize>AL_BITS;\r\n/** Mask to obtain just the alignment bits. */\r\nexport const AL_MASK: usize = AL_SIZE - 1;\r\n/** Maximum 32-bit allocation size. */\r\nexport const MAX_SIZE_32: usize = 1 << 30; // 1GB\r\n","import {\r\n  AL_MASK,\r\n  MAX_SIZE_32\r\n } from \"./allocator\";\r\n\r\n/** Size of an ArrayBuffer header. */\r\nexport const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\r\n/** Maximum byte length of an ArrayBuffer. */\r\nexport const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\r\n\r\nfunction computeSize(byteLength: i32): usize {\r\n  // round up to power of 2, with HEADER_SIZE=8:\r\n  // 0            -> 2^3  = 8\r\n  // 1..8         -> 2^4  = 16\r\n  // 9..24        -> 2^5  = 32\r\n  // ...\r\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\r\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\r\n}\r\n\r\n// Low-level utility\r\n\r\nfunction __gc(ref: usize): void {}\r\n\r\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\r\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\r\n  var buffer: usize;\r\n  if (isManaged<ArrayBuffer>()) {\r\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\r\n  } else {\r\n    buffer = memory.allocate(computeSize(byteLength));\r\n  }\r\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\r\n  return changetype<ArrayBuffer>(buffer);\r\n}\r\n\r\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\r\n  var oldByteLength = buffer.byteLength;\r\n  if (newByteLength > oldByteLength) {\r\n    assert(newByteLength <= MAX_BLENGTH);\r\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\r\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\r\n    } else { // slow path: copy to new buffer\r\n      let newBuffer = allocateUnsafe(newByteLength);\r\n      memory.copy(\r\n        changetype<usize>(newBuffer) + HEADER_SIZE,\r\n        changetype<usize>(buffer) + HEADER_SIZE,\r\n        <usize>oldByteLength\r\n      );\r\n      if (!isManaged<ArrayBuffer>()) {\r\n        memory.free(changetype<usize>(buffer));\r\n      }\r\n      buffer = newBuffer;\r\n    }\r\n    memory.fill(\r\n      changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\r\n      0,\r\n      <usize>(newByteLength - oldByteLength)\r\n    );\r\n  } else if (newByteLength < oldByteLength) { // fast path: override size\r\n    // TBD: worth to copy and release if size is significantly less than before?\r\n    assert(newByteLength >= 0);\r\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\r\n  }\r\n  return buffer;\r\n}\r\n\r\n// The helpers below use two different types in order to emit loads and stores that load respectively\r\n// store one type to/from memory while returning/taking the desired output/input type. This allows to\r\n// emit instructions like\r\n//\r\n// * `i32.load8` ^= `<i32>load<i8>(...)` that reads an i8 but returns an i32, or\r\n// * `i64.load32_s` ^= `<i64>load<i32>(...)`) that reads a 32-bit as a 64-bit integer\r\n//\r\n// without having to emit an additional instruction for conversion purposes. The second parameter\r\n// can be omitted for references and other loads and stores that simply return the exact type.\r\n\r\n@inline export function LOAD<T,TOut = T>(buffer: ArrayBuffer, index: i32, byteOffset: i32 = 0): TOut {\r\n  return <TOut>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, HEADER_SIZE);\r\n}\r\n\r\n@inline export function STORE<T,TIn = T>(buffer: ArrayBuffer, index: i32, value: TIn, byteOffset: i32 = 0): void {\r\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, value, HEADER_SIZE);\r\n}\r\n","import { CanvasInstruction } from \"../../src/shared/CanvasInstruction\";\r\nimport { Buffer } from \"../internal/Buffer\";\r\nimport { LOAD, STORE } from \"internal/arraybuffer\";\r\nimport { DOMMatrix } from \"./DOMMatrix\";\r\nimport { CanvasDirection } from \"../../src/shared/CanvasDirection\";\r\nimport { CanvasPattern } from \"./CanvasPattern\";\r\nimport { CanvasGradient } from \"./CanvasGradient\";\r\nimport { Image, getImageID } from \"./Image\";\r\nimport { CanvasPatternRepetition } from \"../../src/shared/CanvasPatternRepetition\";\r\nimport { GlobalCompositeOperation } from \"../../src/shared/GlobalCompositeOperation\";\r\nimport { ImageSmoothingQuality } from \"../../src/shared/ImageSmoothingQuality\";\r\nimport { LineCap } from \"../../src/shared/LineCap\";\r\nimport { LineJoin } from \"../../src/shared/LineJoin\";\r\nimport { TextAlign } from \"../../src/shared/TextAlign\";\r\nimport { TextBaseline } from \"../../src/shared/TextBaseline\";\r\nimport { arraysEqual } from \"../internal/util\";\r\nimport { Path2DElement } from \"../internal/Path2DElement\";\r\nimport { FillRule } from \"../../src/shared/FillRule\";\r\n\r\n//#region EXTERNALS\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"render\")\r\ndeclare function render(ctxid: i32, data: usize): void;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createLinearGradient\")\r\ndeclare function createLinearGradient(id: i32, x0: f64, y0: f64, x1: f64, y1: f64): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createRadialGradient\")\r\ndeclare function createRadialGradient(id: i32, x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createPattern\")\r\ndeclare function createPattern(ctxid: i32, imageid: i32, repetition: CanvasPatternRepetition): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"measureText\")\r\ndeclare function measureText(id: i32, text: string): f64;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"isPointInPath\")\r\ndeclare function isPointInPath(id: i32, x: f64, y: f64, fillRule: FillRule): bool;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"isPointInStroke\")\r\ndeclare function isPointInStroke(id: i32, x: f64, y: f64): bool;\r\n//#endregion EXTERNALS\r\n\r\n\r\nconst enum FillStrokeStyleType {\r\n  String,\r\n  CanvasPattern,\r\n  CanvasGradient,\r\n}\r\n\r\nvar defaultBlack: string = \"#000\";\r\nvar defaultNone: string = \"none\";\r\nvar defaultFont: string = \"10px sans-serif\";\r\nvar defaultShadowColor: string = \"rgba(0, 0, 0, 0)\";\r\nvar defaultLineDash: Float64Array = new Float64Array(0);\r\n\r\n//#region ARRAYBUFFERINITIALIZER\r\n/**\r\n * Utility function for setting the given ArrayBuffer to the identity 2d transform matrix inline.\r\n *\r\n * @param ArrayBuffer buff\r\n */\r\n// @ts-ignore: Decorators are valid here\r\nfunction setArrayBufferIdentity(buff: ArrayBuffer): ArrayBuffer {\r\n  STORE<f64>(buff, 0, 1.0);\r\n  STORE<f64>(buff, 1, 0.0);\r\n  STORE<f64>(buff, 2, 0.0);\r\n  STORE<f64>(buff, 3, 1.0);\r\n  STORE<f64>(buff, 4, 0.0);\r\n  STORE<f64>(buff, 5, 0.0);\r\n  return buff;\r\n}\r\n\r\n/**\r\n * Utility function for setting the given ArrayBuffer's first value to the specified value inline.\r\n *\r\n * @param ArrayBuffer buff\r\n * @param T value\r\n */\r\n// @ts-ignore: Decorators are valid here\r\nfunction setArrayBufferValue<T>(buff: ArrayBuffer, value: T): ArrayBuffer {\r\n  STORE<T>(buff, 0, value);\r\n  return buff;\r\n}\r\n\r\n/**\r\n * Utility function for setting the given ArrayBuffer's first value to the specified value inline.\r\n *\r\n * @param ArrayBuffer buff\r\n * @param T value\r\n */\r\n// @ts-ignore: Decorators are valid here\r\nfunction setArrayBufferValue2<T>(buff: ArrayBuffer, a: T, b: T): ArrayBuffer {\r\n  STORE<T>(buff, 0, a);\r\n  STORE<T>(buff, 1, b);\r\n  return buff;\r\n}\r\n//#endregion ARRAYBUFFERINITIALIZER\r\n\r\n/** The path element initializer. */\r\nfunction createPathElements(): Path2DElement[] {\r\n  var path: Path2DElement[] = new Array<Path2DElement>(0xFF);\r\n  for (var i = 0; i < 0x1000; i++) {\r\n    path[i] = new Path2DElement();\r\n  }\r\n  var el = unchecked(path[0]);\r\n  el.instruction = CanvasInstruction.BeginPath;\r\n  el.count = 0;\r\n  el.updateTransform = true;\r\n  return path;\r\n}\r\n\r\n/**\r\n * An AssemblyScript virtual representation of an actual CanvasRenderingContext2D Object. The\r\n * CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context\r\n * for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and\r\n * other objects.\r\n */\r\n@sealed\r\nexport class CanvasRenderingContext2D extends Buffer<CanvasInstruction> {\r\n  /**\r\n   * The component's external object id. It initializes to -1, which will never be an actual object\r\n   * id externally. If it actually returns -1, it will cause the host to error saying it cannot\r\n   * find the specified canvas context.\r\n   */\r\n  private id: i32 = -1;\r\n\r\n  /**\r\n   * The virutal stack index offset that keeps track of the number of `save()` and `restore()`\r\n   * stack states.\r\n   */\r\n  private _stackOffset: u8 = <u8>0;\r\n\r\n  //#region CREATELINEARGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a\r\n   * gradient along the line connecting two given coordinates.\r\n   *\r\n   * @param {f64} x0 - A float number representing the first x coordinate point of the gradient.\r\n   * @param {f64} y0 - A float number representing the first y coordinate point of the gradient.\r\n   * @param {f64} x1 - A float number representing the second x coordinate point of the gradient.\r\n   * @param {f64} y1 - A float number representing the second y coordinate point of the gradient.\r\n   */\r\n  public createLinearGradient(x0: f64, y0: f64, x1: f64, y1: f64): CanvasGradient {\r\n    var id: i32 = createLinearGradient(this.id, x0, y0, x1, y1);\r\n    var result: CanvasGradient = new CanvasGradient();\r\n    store<i32>(changetype<usize>(result) + offsetof<CanvasGradient>(\"id\"), id);\r\n    return result;\r\n  }\r\n  //#endregion CREATELINEARGRADIENT\r\n\r\n  //#region CREATERADIALGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a\r\n   * radial gradient using the size and coordinates of two circles.\r\n   *\r\n   * @param {f64} x0 - The x-axis coordinate of the start circle.\r\n   * @param {f64} y0 - The y-axis coordinate of the start circle.\r\n   * @param {f64} r0 - The radius of the start circle. Must be non-negative and finite.\r\n   * @param {f64} x1 - The x-axis coordinate of the end circle.\r\n   * @param {f64} y1 - The y-axis coordinate of the end circle.\r\n   * @param {f64} r1 - The radius of the end circle. Must be non-negative and finite.\r\n   */\r\n  public createRadialGradient(x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64): CanvasGradient {\r\n    var id: i32 = createRadialGradient(this.id, x0, y0, r0, x1, y1, r1);\r\n    var result: CanvasGradient = new CanvasGradient();\r\n    store<i32>(changetype<usize>(result) + offsetof<CanvasGradient>(\"id\"), id);\r\n    return result;\r\n  }\r\n  //#endregion CREATERADIALGRADIENT\r\n\r\n  //#region TRANSFORM\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of transforms. Each transform value is a set of 6 numbers\r\n   * stored in a repeated pattern of [a0, b0, c0, d0, e0, f0, a1, b1, c1, d1, e1, f1, ...].\r\n   */\r\n  private _transformStack: ArrayBuffer = setArrayBufferIdentity(new ArrayBuffer(0xFF * sizeof<f64>() * 6));\r\n\r\n  /**\r\n   * An ArrayBuffer that contains a single transform value that represents the last transform\r\n   * written by a `setTransform()` operation\r\n   */\r\n  private _currentTransform: ArrayBuffer = setArrayBufferIdentity(new ArrayBuffer(sizeof<f64>() * 6));\r\n\r\n  /**\r\n   * An operation that generates a DOMMatrix reflecting the current transform on the `_transformStack\r\n   */\r\n  @inline\r\n  private _getTransform(): DOMMatrix {\r\n    var result: DOMMatrix = new DOMMatrix();\r\n    var index: i32 = 6 * <i32>this._stackOffset;\r\n    var stack: ArrayBuffer = this._transformStack;\r\n    result.m11 = LOAD<f64>(stack, index);\r\n    result.m12 = LOAD<f64>(stack, index + 1);\r\n    result.m21 = LOAD<f64>(stack, index + 2);\r\n    result.m22 = LOAD<f64>(stack, index + 3);\r\n    result.m41 = LOAD<f64>(stack, index + 4);\r\n    result.m42 = LOAD<f64>(stack, index + 5);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * An function that sets the current transform on the `_transformStack` to the specified\r\n   * DOMMatrix values.\r\n   *\r\n   * @param {f64} a - The a property of the transform matrix.\r\n   * @param {f64} b - The b property of the transform matrix.\r\n   * @param {f64} c - The c property of the transform matrix.\r\n   * @param {f64} d - The d property of the transform matrix.\r\n   * @param {f64} e - The e property of the transform matrix.\r\n   * @param {f64} f - The f property of the transform matrix.\r\n   */\r\n  @inline\r\n  private _setTransform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var index: i32 = 6 * <i32>this._stackOffset;\r\n    var stack: ArrayBuffer = this._transformStack;\r\n    STORE<f64>(stack, index, a);\r\n    STORE<f64>(stack, index + 1, b);\r\n    STORE<f64>(stack, index + 2, c);\r\n    STORE<f64>(stack, index + 3, d);\r\n    STORE<f64>(stack, index + 4, e);\r\n    STORE<f64>(stack, index + 5, f);\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.currentTransform property of the Canvas 2D API returns or sets a\r\n   * DOMMatrix (current specification) object for the current transformation matrix\r\n  */\r\n  public get currentTransform(): DOMMatrix {\r\n    return this._getTransform();\r\n  }\r\n\r\n  public set currentTransform(value: DOMMatrix) {\r\n    this._setTransform(value.m11, value.m12, value.m21, value.m22, value.m41, value.m42);\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.getTransform() method of the Canvas 2D API gets the current\r\n   * transformation matrix, and returns a DOMMatrix\r\n   */\r\n  public getTransform(): DOMMatrix {\r\n    return this._getTransform();\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current transform value on the _transformStack to the\r\n   * buffer if it currently does not match the last written transform.\r\n   */\r\n  private _updateTransform(): void {\r\n    var index: i32 = this._stackOffset * 6;\r\n    var stack: ArrayBuffer = this._transformStack;\r\n    var a = LOAD<f64>(stack, index);\r\n    var b = LOAD<f64>(stack, index + 1);\r\n    var c = LOAD<f64>(stack, index + 2);\r\n    var d = LOAD<f64>(stack, index + 3);\r\n    var e = LOAD<f64>(stack, index + 4);\r\n    var f = LOAD<f64>(stack, index + 5);\r\n\r\n    var current: ArrayBuffer = this._currentTransform;\r\n    if ( a != LOAD<f64>(current, 0)\r\n      || b != LOAD<f64>(current, 1)\r\n      || c != LOAD<f64>(current, 2)\r\n      || d != LOAD<f64>(current, 3)\r\n      || e != LOAD<f64>(current, 4)\r\n      || f != LOAD<f64>(current, 5)) {\r\n      super._writeSix(CanvasInstruction.SetTransform, a, b, c, d, e, f);\r\n      STORE<f64>(current, 0, a);\r\n      STORE<f64>(current, 1, b);\r\n      STORE<f64>(current, 2, c);\r\n      STORE<f64>(current, 3, d);\r\n      STORE<f64>(current, 4, e);\r\n      STORE<f64>(current, 5, f);\r\n    }\r\n  }\r\n  //#endregion TRANSFORM\r\n\r\n  //#region DIRECTION\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of CanvasDirection values, stored as `i32` values\r\n   */\r\n  private _directionStack: ArrayBuffer\r\n    = setArrayBufferValue<CanvasDirection>(new ArrayBuffer(0xFF * 4), CanvasDirection.inherit);\r\n\r\n  /**\r\n   * A private member that contains a single CanvasDirection value that represents the last\r\n   * CanvasDirection value written by a drawing operation\r\n   */\r\n  private _currentDirection: CanvasDirection = CanvasDirection.inherit;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text\r\n   * direction used to draw text\r\n   */\r\n  public get direction(): CanvasDirection {\r\n    return LOAD<CanvasDirection>(this._directionStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set direction(value: CanvasDirection) {\r\n    STORE<CanvasDirection>(this._directionStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current CanvasDirection value on the _directionStack to\r\n   * the buffer if it currently does not match the last written CanvasDirection.\r\n   */\r\n  @inline\r\n  private _updateDirection(): void {\r\n    var value: CanvasDirection = LOAD<CanvasDirection>(this._directionStack, <i32>this._stackOffset);\r\n    if (value != this._currentDirection) {\r\n      this._currentDirection = value;\r\n      super._writeOne(CanvasInstruction.Direction, <f64>value);\r\n    }\r\n  }\r\n  //#endregion DIRECTION\r\n\r\n  //#region FILLSTYLE\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of 2 i32 values. For each fillStyle, if the fillStyle is\r\n   * a string, the second i32 value will be a pointer, otherwise, it's a `usize` representing the\r\n   * style's external objectID.\r\n   */\r\n  private _fillStyleStack: ArrayBuffer = setArrayBufferValue2<usize>(\r\n    new ArrayBuffer(0xFF * sizeof<usize>() * 2),\r\n    <usize>FillStrokeStyleType.String,\r\n    changetype<usize>(defaultBlack),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single StrokeFillStyleType value that represents the last\r\n   * fillStyle value written by a drawing operation\r\n   */\r\n  private _currentFillStyleType: FillStrokeStyleType = FillStrokeStyleType.String;\r\n\r\n  /**\r\n   * A private member that contains a single pointer or id value that represents the last\r\n   * fillStyle value written by a drawing operation\r\n   */\r\n  private _currentFillStyleValue: usize = changetype<usize>(defaultBlack);\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the current text\r\n   * representing a CSS Color\r\n   */\r\n  public get fillStyle(): string | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var fillStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<usize>(\r\n      this._fillStyleStack,\r\n      index,\r\n    );\r\n    if (fillStyleType == FillStrokeStyleType.String) {\r\n      return changetype<string>(LOAD<usize>(this._fillStyleStack, index + 1));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public set fillStyle(value: string | null) {\r\n    if (value == null) value = defaultBlack;\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    STORE<usize>(buff, index, <usize>FillStrokeStyleType.String);\r\n    STORE<usize>(buff, index + 1, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current fillStyle value on the _fillStyleStack to the\r\n   * buffer if it currently does not match the last written fillStyle.\r\n   */\r\n  @inline\r\n  private _updateFillStyle(): void {\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    var index: i32 = <i32>this._stackOffset * 2;\r\n    var styleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<usize>(buff, index);\r\n    var value: usize = LOAD<usize>(buff, index + 1);\r\n    if (styleType != this._currentFillStyleType || value != this._currentFillStyleValue) {\r\n      var inst: CanvasInstruction;\r\n      if (styleType == FillStrokeStyleType.String) inst = CanvasInstruction.FillStyle;\r\n      else if (styleType == FillStrokeStyleType.CanvasGradient) inst = CanvasInstruction.FillGradient;\r\n      else inst = CanvasInstruction.FillPattern;\r\n      super._writeOne(inst, <f64>value);\r\n    }\r\n  }\r\n  //#endregion FILLSTYLE\r\n\r\n  //#region FILLPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.fillPattern property of the Canvas 2D API specifies the current\r\n   * fillStyle pattern\r\n   */\r\n  public get fillPattern(): CanvasPattern | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    var fillStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<i32>(\r\n      buff,\r\n      index,\r\n    );\r\n\r\n    if (fillStyleType == FillStrokeStyleType.CanvasPattern) {\r\n      var result: CanvasPattern = new CanvasPattern();\r\n      store<i32>(\r\n        changetype<usize>(result) + offsetof<CanvasPattern>(\"id\"),\r\n        LOAD<i32>(buff, index + 1),\r\n      );\r\n      return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public set fillPattern(value: CanvasPattern | null) {\r\n    if (value == null) {\r\n      this.fillStyle = defaultBlack;\r\n      return;\r\n    }\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    STORE<i32>(buff, index, FillStrokeStyleType.CanvasPattern);\r\n    STORE<i32>(buff, index + 1, load<i32>(changetype<usize>(value) + offsetof<CanvasPattern>(\"id\")));\r\n  }\r\n  //#endregion FILLPATTERN\r\n\r\n  //#region FILLGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.fillGradient property of the Canvas 2D API specifies the current\r\n   * fillStyle gradient\r\n   */\r\n  public get fillGradient(): CanvasGradient | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    var fillStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<i32>(\r\n      buff,\r\n      index,\r\n    );\r\n    if (fillStyleType == FillStrokeStyleType.CanvasGradient) {\r\n      var result: CanvasGradient = new CanvasGradient();\r\n      store<i32>(\r\n        changetype<usize>(result) + offsetof<CanvasGradient>(\"id\"),\r\n        LOAD<i32>(buff, index + 1),\r\n      );\r\n      return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public set fillGradient(value: CanvasGradient | null) {\r\n    if (value == null) {\r\n      this.fillStyle = defaultBlack;\r\n      return;\r\n    }\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._fillStyleStack;\r\n    STORE<i32>(buff, index, FillStrokeStyleType.CanvasGradient);\r\n    STORE<i32>(buff, index + 1, load<i32>(changetype<usize>(value) + offsetof<CanvasGradient>(\"id\")));\r\n  }\r\n  //#endregion FILLGRADIENT\r\n\r\n  //#region CREATEPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern\r\n   * using the specified image and repetition.\r\n   *\r\n   * @param {Image} img - A CanvasImageSource to be used as the pattern's Image.\r\n   * @param {CanvasPatternRepetition} repetition - An enum value indicating how to repeat the pattern's image.\r\n   */\r\n  public createPattern(img: Image, repetition: CanvasPatternRepetition): CanvasPattern {\r\n    var result = new CanvasPattern();\r\n    var id: i32 = load<i32>(changetype<usize>(img) + offsetof<Image>(\"_id\"));\r\n    store<i32>(changetype<usize>(result) + offsetof<CanvasPattern>(\"id\"), createPattern(this.id, id, repetition));\r\n    return result;\r\n  }\r\n  //#endregion CREATEPATTERN\r\n\r\n  //#region FILTER\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of string pointer values.\r\n   */\r\n  private _filterStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<usize>()),\r\n    changetype<usize>(defaultNone),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single string value that represents the last\r\n   * filter value written by a drawing operation.\r\n   */\r\n  private _currentFilter: string = defaultNone;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects such\r\n   * as blurring and grayscaling. It is similar to the CSS filter property and accepts the same\r\n   * values.\r\n   */\r\n  public get filter(): string {\r\n    return changetype<string>(LOAD<usize>(this._filterStack, <i32>this._stackOffset));\r\n  }\r\n\r\n  public set filter(value: string) {\r\n    STORE<usize>(this._filterStack, <i32>this._stackOffset, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current filter value on the _filterStack if it currently\r\n   * does not match the last written filter string value to the buffer using write_one.\r\n   */\r\n  @inline\r\n  private _updateFilter(): void {\r\n    var value: string = changetype<string>(LOAD<usize>(this._filterStack, <i32>this._stackOffset));\r\n    if (value != this._currentFilter) {\r\n      this._currentFilter = value;\r\n      super._writeOne(CanvasInstruction.Filter, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion FILTER\r\n\r\n  //#region FONT\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of string pointer values.\r\n   */\r\n  private _fontStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<usize>()),\r\n    changetype<usize>(defaultFont),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single string value that represents the last\r\n   * font value written by a drawing operation.\r\n   */\r\n  private _currentFont: string = defaultFont;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text\r\n   * style to use when drawing text. This string uses the same syntax as the CSS font specifier.\r\n   */\r\n  public get font(): string {\r\n    return changetype<string>(LOAD<usize>(this._fontStack, <i32>this._stackOffset));\r\n  }\r\n\r\n  public set font(value: string) {\r\n    STORE<usize>(this._fontStack, <i32>this._stackOffset, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current font value on the _fontStack to the buffer if it\r\n   * currently does not match the last written font string value.\r\n   */\r\n  @inline\r\n  private _updateFont(): void {\r\n    var value: string = changetype<string>(LOAD<usize>(this._fontStack, <i32>this._stackOffset));\r\n    if (value != this._currentFont) {\r\n      this._currentFont = value;\r\n      super._writeOne(CanvasInstruction.Font, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion FONT\r\n\r\n  //#region GLOBALALPHA\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _globalAlphaStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<f64>()),\r\n    1.0,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last globalAlpha value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentGlobalAlpha: f64 = 1.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha\r\n   * (transparency) value that is applied to shapes and images before they are drawn onto the\r\n   * canvas.\r\n   */\r\n  public get globalAlpha(): f64 {\r\n    return LOAD<f64>(this._globalAlphaStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set globalAlpha(value: f64) {\r\n    if (!isFinite(value) || value < 0.0 || value > 1.0) return;\r\n    STORE<f64>(this._globalAlphaStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current globalAlpha value on the _globalAlphaStack to the\r\n   * buffer if it currently does not match the last written globalAlpha value.\r\n   */\r\n  @inline\r\n  private _updateGlobalAlpha(): void {\r\n    var value: f64 = LOAD<f64>(this._globalAlphaStack, <i32>this._stackOffset);\r\n    if (value != this._currentGlobalAlpha) {\r\n      this._currentGlobalAlpha = value;\r\n      super._writeOne(CanvasInstruction.GlobalAlpha, value);\r\n    }\r\n  }\r\n  //#endregion GLOBALALPHA\r\n\r\n  //#region GLOBALCOMPOSITEOPERATION\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of GlobalCompositeOperation values.\r\n   */\r\n  private _globalCompositeOperationStack: ArrayBuffer = setArrayBufferValue<GlobalCompositeOperation>(\r\n    new ArrayBuffer(0xFF * sizeof<GlobalCompositeOperation>()),\r\n    GlobalCompositeOperation.source_over,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single GlobalCompositeOperation value that represents the last\r\n   * globalCompositeOperation value written by a drawing operation.\r\n   */\r\n  private _currentGlobalCompositeOperation: GlobalCompositeOperation = GlobalCompositeOperation.source_over;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the\r\n   * type of compositing operation to apply when drawing new shapes.\r\n   */\r\n  public get globalCompositeOperation(): GlobalCompositeOperation {\r\n    return LOAD<GlobalCompositeOperation>(this._globalCompositeOperationStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set globalCompositeOperation(value: GlobalCompositeOperation) {\r\n    STORE<GlobalCompositeOperation>(this._globalCompositeOperationStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current globalCompositeOperation value on the\r\n   * _globalCompositeOperationStack to the buffer if it currently does not match the last written\r\n   * globalCompositeOperation value.\r\n   */\r\n  @inline\r\n  private _updateGlobalCompositeOperation(): void {\r\n    var value: GlobalCompositeOperation = LOAD<GlobalCompositeOperation>(\r\n      this._globalCompositeOperationStack,\r\n      <i32>this._stackOffset,\r\n    );\r\n    if (value != this._currentGlobalCompositeOperation) {\r\n      this._currentGlobalCompositeOperation = value;\r\n      super._writeOne(CanvasInstruction.GlobalCompositeOperation, <f64>value);\r\n    }\r\n  }\r\n  //#endregion GLOBALCOMPOSITEOPERATION\r\n\r\n  //#region IMAGESMOOTHINGENABLED\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of bool values.\r\n   */\r\n  private _imageSmoothingEnabledStack: ArrayBuffer = setArrayBufferValue<bool>(\r\n    new ArrayBuffer(0xFF * sizeof<bool>()),\r\n    true,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single bool value that represents the last\r\n   * imageSmoothingEnabled value written by a drawing operation.\r\n   */\r\n  private _currentImageSmoothingEnabled: bool = true;\r\n\r\n  /**\r\n   * The imageSmoothingEnabled property of the CanvasRenderingContext2D interface, part of the\r\n   * Canvas API, determines whether scaled images are smoothed (true, default) or not (false). On\r\n   * getting the imageSmoothingEnabled property, the last value it was set to is returned.\r\n   */\r\n  public get imageSmoothingEnabled(): bool {\r\n    return LOAD<bool>(this._imageSmoothingEnabledStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set imageSmoothingEnabled(value: bool) {\r\n    STORE<bool>(this._imageSmoothingEnabledStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current imageSmoothingEnabled value on the\r\n   * _imageSmoothingEnabledStack to the buffer if it currently does not match the last written\r\n   * imageSmoothingEnabled value.\r\n   */\r\n  @inline\r\n  private _updateImageSmoothingEnabled(): void {\r\n    var value: bool = LOAD<bool>(this._imageSmoothingEnabledStack, <i32>this._stackOffset);\r\n    if (value != this._currentImageSmoothingEnabled) {\r\n      this._currentImageSmoothingEnabled = value;\r\n      super._writeOne(CanvasInstruction.ImageSmoothingEnabled, value ? 1.0 : 0.0);\r\n    }\r\n  }\r\n  //#endregion IMAGESMOOTHINGENABLED\r\n\r\n  //#region IMAGESMOOTHINGQUALITY\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of ImageSmoothingQuality values.\r\n   */\r\n  private _imageSmoothingQualityStack: ArrayBuffer = setArrayBufferValue<ImageSmoothingQuality>(\r\n    new ArrayBuffer(0xFF * sizeof<ImageSmoothingQuality>()),\r\n    ImageSmoothingQuality.low,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single ImageSmoothingQuality value that represents the last\r\n   * imageSmoothingQuality value written by a drawing operation.\r\n   */\r\n  private _currentImageSmoothingQuality: ImageSmoothingQuality = ImageSmoothingQuality.low;\r\n\r\n  /**\r\n   * The imageSmoothingQuality property of the CanvasRenderingContext2D interface, part of the\r\n   * Canvas API, lets you set the quality of image smoothing.\r\n   */\r\n  public get imageSmoothingQuality(): ImageSmoothingQuality {\r\n    return LOAD<ImageSmoothingQuality>(this._imageSmoothingQualityStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set imageSmoothingQuality(value: ImageSmoothingQuality) {\r\n    STORE<ImageSmoothingQuality>(this._imageSmoothingQualityStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current imageSmoothingQuality value on the\r\n   * _imageSmoothingQualityStack to the buffer if it currently does not match the last written\r\n   * imageSmoothingQuality value, and imageSmoothingEnabled is true.\r\n   */\r\n  @inline\r\n  private _updateImageSmoothingQuality(): void {\r\n    if (LOAD<bool>(this._imageSmoothingEnabledStack, <i32>this._stackOffset)) {\r\n      var value: ImageSmoothingQuality = LOAD<ImageSmoothingQuality>(\r\n        this._imageSmoothingQualityStack,\r\n        <i32>this._stackOffset,\r\n      );\r\n      if (value != this._currentImageSmoothingQuality) {\r\n        this._currentImageSmoothingQuality = value;\r\n        super._writeOne(CanvasInstruction.ImageSmoothingQuality, <f64>value);\r\n      }\r\n    }\r\n  }\r\n  //#endregion IMAGESMOOTHINGQUALITY\r\n\r\n  //#region LINECAP\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of LineCap values.\r\n   */\r\n  private _lineCapStack: ArrayBuffer = setArrayBufferValue<LineCap>(\r\n    new ArrayBuffer(0xFF * sizeof<LineCap>()),\r\n    LineCap.butt,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentLineCap: LineCap = LineCap.butt;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used\r\n   * to draw the end points of lines.\r\n   */\r\n  public get lineCap(): LineCap {\r\n    return LOAD<LineCap>(this._lineCapStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set lineCap(value: LineCap) {\r\n    STORE<LineCap>(this._lineCapStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineCap value on the _lineCapStack to the buffer\r\n   * if it currently does not match the last written lineCap value.\r\n   */\r\n  @inline\r\n  private _updateLineCap(): void {\r\n    var value: LineCap = LOAD<LineCap>(\r\n      this._lineCapStack,\r\n      <i32>this._stackOffset,\r\n    );\r\n    if (value != this._currentLineCap) {\r\n      this._currentLineCap = value;\r\n      super._writeOne(CanvasInstruction.LineCap, <f64>value);\r\n    }\r\n  }\r\n  //#endregion LINECAP\r\n\r\n  //#region LINEDASH\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of usize pointer values.\r\n   */\r\n  private _lineDashStack: ArrayBuffer = setArrayBufferValue<usize>(\r\n    new ArrayBuffer(0xFF * sizeof<usize>()),\r\n    changetype<usize>(defaultLineDash),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentLineDash: Float64Array = defaultLineDash;\r\n\r\n  /**\r\n   * The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the\r\n   * current line dash pattern.\r\n   */\r\n  public getLineDash(): Float64Array {\r\n    return this._getLineDash();\r\n  }\r\n\r\n  /**\r\n   * The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the\r\n   * line dash pattern used when stroking lines. It uses a Float64Array of values that specify\r\n   * alternating lengths of lines and gaps which describe the pattern.\r\n   *\r\n   * @param {Float64Array} value - An Array of numbers that specify distances to alternately draw a\r\n   * line and a gap (in coordinate space units). If the number of elements in the array is odd, the\r\n   * elements of the array get copied and concatenated. For example, Float64Array [5, 15, 25] will\r\n   * become Float64Array [5, 15, 25, 5, 15, 25]. If the array is empty, the line dash list is\r\n   * cleared and line strokes return to being solid.\r\n   */\r\n  public setLineDash(value: Float64Array): void {\r\n    STORE<usize>(this._lineDashStack, <i32>this._stackOffset, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal getLineDash function that loops backwards from the current stackOffset until it\r\n   * doesn't find a null pointer, then returns the reference.\r\n   */\r\n  @inline\r\n  private _getLineDash(): Float64Array {\r\n    var offset: i32 = this._stackOffset;\r\n    var pointer: usize = LOAD<usize>(this._lineDashStack, offset);\r\n    while (changetype<Float64Array>(pointer) == null) {\r\n      --offset;\r\n      pointer = LOAD<usize>(this._lineDashStack, offset);\r\n    }\r\n    return changetype<Float64Array>(pointer);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineDash value on the _lineDashStack to the buffer\r\n   * if it currently does not match the last written lineCap value.\r\n   */\r\n  @inline\r\n  private _updateLineDash(): void {\r\n    var lineDash: Float64Array = this._getLineDash();\r\n    var current: Float64Array = this._currentLineDash;\r\n\r\n    if (!arraysEqual(current, lineDash)) {\r\n      this._currentLineDash = lineDash;\r\n      super._writeOne(CanvasInstruction.LineDash, <f64>changetype<usize>(lineDash));\r\n    }\r\n  }\r\n  //#endregion LINEDASH\r\n\r\n  //#region LINEDASHOFFSET\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _lineDashOffsetStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<f64>()),\r\n    0.0,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last lineDashOffset value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentLineDashOffset: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash\r\n   * offset, or \"phase.\"\r\n   */\r\n  public get lineDashOffset(): f64 {\r\n    return LOAD<f64>(this._lineDashOffsetStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set lineDashOffset(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    STORE<f64>(this._lineDashOffsetStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineDashOffset value on the _lineDashOffsetStack\r\n   * to the buffer if it currently does not match the last written lineDashOffset value.\r\n   */\r\n  @inline\r\n  private _updateLineDashOffset(): void {\r\n    var value: f64 = LOAD<f64>(this._lineDashOffsetStack, <i32>this._stackOffset);\r\n    if (value != this._currentLineDashOffset) {\r\n      this._currentLineDashOffset = value;\r\n      super._writeOne(CanvasInstruction.LineDashOffset, value);\r\n    }\r\n  }\r\n  //#endregion LINEDASHOFFSET\r\n\r\n  //#region LINEJOIN\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of LineJoin values.\r\n   */\r\n  private _lineJoinStack: ArrayBuffer = setArrayBufferValue<LineJoin>(\r\n    new ArrayBuffer(0xFF * sizeof<LineJoin>()),\r\n    LineJoin.miter,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single LineJoin value that represents the last\r\n   * lineJoin value written by a drawing operation.\r\n   */\r\n  private _currentLineJoin: LineJoin = LineJoin.miter;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used\r\n   * to join two line segments where they meet.\r\n   *\r\n   * This property has no effect wherever two connected segments have the same direction, because\r\n   * no joining area will be added in this case. Degenerate segments with a length of zero (i.e.,\r\n   * with all endpoints and control points at the exact same position) are also ignored.\r\n   */\r\n  public get lineJoin(): LineJoin {\r\n    return LOAD<LineJoin>(this._lineJoinStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set lineJoin(value: LineJoin) {\r\n    STORE<LineJoin>(this._lineJoinStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineJoin value on the  _lineJoinStack if it\r\n   * currently does not match the last written lineJoin value.\r\n   */\r\n  @inline\r\n  private _updateLineJoin(): void {\r\n    var value: LineJoin = LOAD<LineJoin>(\r\n      this._lineJoinStack,\r\n      <i32>this._stackOffset,\r\n    );\r\n    if (value != this._currentLineJoin) {\r\n      this._currentLineJoin = value;\r\n      super._writeOne(CanvasInstruction.LineJoin, <f64>value);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region LINEWIDTH\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _lineWidthStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<f64>()),\r\n    1.0,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last lineWidth value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentLineWidth: f64 = 1.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the line dash\r\n   * offset, or \"phase.\"\r\n   */\r\n  public get lineWidth(): f64 {\r\n    return LOAD<f64>(this._lineWidthStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set lineWidth(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    STORE<f64>(this._lineWidthStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineWidth value on the _lineWidthStack to the\r\n   * buffer if it currently does not match the last written lineWidth value.\r\n   */\r\n  @inline\r\n  private _updateLineWidth(): void {\r\n    var value: f64 = LOAD<f64>(this._lineWidthStack, <i32>this._stackOffset);\r\n    if (value != this._currentLineWidth) {\r\n      this._currentLineWidth = value;\r\n      super._writeOne(CanvasInstruction.LineWidth, value);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region MITERLIMIT\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _miterLimitStack: ArrayBuffer = setArrayBufferValue(\r\n    new ArrayBuffer(0xFF * sizeof<f64>()),\r\n    10.0,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last miterLimit value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentMiterLimit: f64 = 10.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit\r\n   * ratio. It establishes a limit on the miter when two lines join at a sharp angle, to let you\r\n   * control how thick the junction becomes.\r\n   */\r\n  public get miterLimit(): f64 {\r\n    return LOAD<f64>(this._miterLimitStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set miterLimit(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    STORE<f64>(this._miterLimitStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current miterLimit value on the _miterLimitStack to the\r\n   * buffer if it currently does not match the last written miterLimit value.\r\n   */\r\n  @inline\r\n  private _updateMiterLimit(): void {\r\n    var value: f64 = LOAD<f64>(this._miterLimitStack, <i32>this._stackOffset);\r\n    if (value != this._currentMiterLimit) {\r\n      this._currentMiterLimit = value;\r\n      super._writeOne(CanvasInstruction.MiterLimit, value);\r\n    }\r\n  }\r\n  //#endregion MITERLIMIT\r\n\r\n  //#region SHADOWBLUR\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _shadowBlurStack: ArrayBuffer = new ArrayBuffer(0xFF * sizeof<f64>());\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowBlur value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowBlur: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of\r\n   * blur applied to shadows. The default is 0 (no blur).\r\n   *\r\n   * The shadowBlur value is a non-negative float specifying the level of shadow blur, where 0\r\n   * represents no blur and larger numbers represent increasingly more blur. This value doesn't\r\n   * correspond to a number of pixels, and is not affected by the current transformation matrix. The\r\n   * default value is 0. Negative, Infinity, and NaN values are ignored.\r\n   */\r\n  public get shadowBlur(): f64 {\r\n    return LOAD<f64>(this._shadowBlurStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set shadowBlur(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    STORE<f64>(this._shadowBlurStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowBlur value on the _shadowBlurStack to the\r\n   * buffer if it currently does not match the last written shadowBlur value.\r\n   */\r\n  @inline\r\n  private _updateShadowBlur(): void {\r\n    var value: f64 = LOAD<f64>(this._shadowBlurStack, <i32>this._stackOffset);\r\n    if (value != this._currentShadowBlur) {\r\n      this._currentShadowBlur = value;\r\n      super._writeOne(CanvasInstruction.ShadowBlur, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWBLUR\r\n\r\n  //#region SHADOWCOLOR\r\n  /**\r\n   * An ArrayBuffer that contains 256 pointers to shadowColor strings.\r\n   */\r\n  private _shadowColorStack: ArrayBuffer = setArrayBufferValue<usize>(\r\n    new ArrayBuffer(0xFF * sizeof<usize>()),\r\n    changetype<usize>(defaultShadowColor),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single StrokeShadowColorType value that represents the last\r\n   * shadowColor value written by a drawing operation\r\n   */\r\n  private _currentShadowColor: string = defaultShadowColor;\r\n\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the current text\r\n   * representing a CSS Color\r\n   */\r\n  public get shadowColor(): string {\r\n    return changetype<string>(LOAD<usize>(this._shadowColorStack, this._stackOffset));\r\n  }\r\n\r\n  public set shadowColor(value: string) {\r\n    if (value == null) value = defaultShadowColor;\r\n    STORE<usize>(this._shadowColorStack, this._stackOffset, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowColor value on the _shadowColorStack to the\r\n   * buffer if it currently does not match the last written shadowColor.\r\n   */\r\n  @inline\r\n  private _updateShadowColor(): void {\r\n    var value: string = changetype<string>(LOAD<usize>(this._shadowColorStack, <i32>this._stackOffset));\r\n    if (value != this._currentShadowColor) {\r\n      this._currentFilter = value;\r\n      super._writeOne(CanvasInstruction.ShadowColor, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region SHADOWOFFSETX\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _shadowOffsetXStack: ArrayBuffer = new ArrayBuffer(0xFF * sizeof<f64>());\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowOffsetX value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowOffsetX: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance\r\n   * that shadows will be offset horizontally.\r\n   *\r\n   * The value is a f64 specifying the distance that shadows will be offset horizontally. Positive\r\n   * values are to the right, and negative to the left. The default value is 0 (no horizontal\r\n   * offset). Infinity and NaN values are ignored.\r\n   */\r\n  public get shadowOffsetX(): f64 {\r\n    return LOAD<f64>(this._shadowOffsetXStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set shadowOffsetX(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    STORE<f64>(this._shadowOffsetXStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowOffsetX value on the _shadowOffsetXStack to the\r\n   * buffer if it currently does not match the last written shadowOffsetX value.\r\n   */\r\n  @inline\r\n  private _updateShadowOffsetX(): void {\r\n    var value: f64 = LOAD<f64>(this._shadowOffsetXStack, <i32>this._stackOffset);\r\n    if (value != this._currentShadowOffsetX) {\r\n      this._currentShadowOffsetX = value;\r\n      super._writeOne(CanvasInstruction.ShadowOffsetX, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWOFFSETX\r\n\r\n  //#region SHADOWOFFSETY\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of f64 values.\r\n   */\r\n  private _shadowOffsetYStack: ArrayBuffer = new ArrayBuffer(0xFF * sizeof<f64>());\r\n\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowOffsetY value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowOffsetY: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance\r\n   * that shadows will be offset vertically.\r\n   *\r\n   * The value is a f64 specifying the distance that shadows will be offset horizontally. Positive\r\n   * values are down, and negative are up. The default value is 0 (no vertical offset). Infinity and\r\n   * NaN values are ignored\r\n   */\r\n  public get shadowOffsetY(): f64 {\r\n    return LOAD<f64>(this._shadowOffsetYStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set shadowOffsetY(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    STORE<f64>(this._shadowOffsetYStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowOffsetY value on the _shadowOffsetYStack to the\r\n   * buffer if it currently does not match the last written shadowOffsetY value.\r\n   */\r\n  @inline\r\n  private _updateShadowOffsetY(): void {\r\n    var value: f64 = LOAD<f64>(this._shadowOffsetYStack, <i32>this._stackOffset);\r\n    if (value != this._currentShadowOffsetY) {\r\n      this._currentShadowOffsetY = value;\r\n      super._writeOne(CanvasInstruction.ShadowOffsetY, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWOFFSETY\r\n\r\n  //#region STROKESTYLE\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of 2 usize values. For each strokeStyle, if the strokeStyle is\r\n   * a string, the second i32 value will be a pointer, otherwise, it's a `usize` representing the\r\n   * style's external objectID.\r\n   */\r\n  private _strokeStyleStack: ArrayBuffer = setArrayBufferValue2<usize>(\r\n    new ArrayBuffer(0xFF * sizeof<usize>() * 2),\r\n    <usize>FillStrokeStyleType.String,\r\n    changetype<usize>(defaultBlack),\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single StrokeFillStyleType value that represents the last\r\n   * strokeStyle value written by a drawing operation\r\n   */\r\n  private _currentStrokeStyleType: FillStrokeStyleType = FillStrokeStyleType.String;\r\n\r\n  /**\r\n   * A private member that contains a single pointer or id value that represents the last\r\n   * strokeStyle value written by a drawing operation\r\n   */\r\n  private _currentStrokeStyleValue: usize = changetype<usize>(defaultBlack);\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color,\r\n   * gradient, or pattern to use for the strokes (outlines) around shapes. The default is #000\r\n   * (black).\r\n   */\r\n  public get strokeStyle(): string | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var strokeStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<usize>(\r\n      this._strokeStyleStack,\r\n      index,\r\n    );\r\n    if (strokeStyleType == FillStrokeStyleType.String) {\r\n      return changetype<string>(LOAD<usize>(this._strokeStyleStack, index + 1));\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public set strokeStyle(value: string | null) {\r\n    if (value == null) value = defaultBlack;\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    STORE<usize>(buff, index, <usize>FillStrokeStyleType.String);\r\n    STORE<usize>(buff, index + 1, changetype<usize>(value));\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current strokeStyle value on the _strokeStyleStack to the\r\n   * buffer if it currently does not match the last written strokeStyle.\r\n   */\r\n  @inline\r\n  private _updateStrokeStyle(): void {\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    var index: i32 = <i32>this._stackOffset * 2;\r\n    var styleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<usize>(buff, index);\r\n    var value: usize = LOAD<usize>(buff, index + 1);\r\n    if (styleType != this._currentStrokeStyleType || value != this._currentStrokeStyleValue) {\r\n      var inst: CanvasInstruction;\r\n      if (styleType == FillStrokeStyleType.String) inst = CanvasInstruction.StrokeStyle;\r\n      else if (styleType == FillStrokeStyleType.CanvasGradient) inst = CanvasInstruction.StrokeGradient;\r\n      else inst = CanvasInstruction.StrokePattern;\r\n      super._writeOne(inst, <f64>value);\r\n    }\r\n  }\r\n  //#endregion STROKESTYLE\r\n\r\n  //#region STROKEPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.strokePattern property of the Canvas 2D API specifies pattern to\r\n   * use for the strokes (outlines) around shapes. The default is null.\r\n   */\r\n  public get strokePattern(): CanvasPattern | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    var strokeStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<i32>(\r\n      buff,\r\n      index,\r\n    );\r\n\r\n    if (strokeStyleType == FillStrokeStyleType.CanvasPattern) {\r\n      var result: CanvasPattern = new CanvasPattern();\r\n      store<i32>(\r\n        changetype<usize>(result) + offsetof<CanvasPattern>(\"id\"),\r\n        LOAD<i32>(buff, index + 1),\r\n      );\r\n      return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public set strokePattern(value: CanvasPattern | null) {\r\n    if (value == null) {\r\n      this.strokeStyle = defaultBlack;\r\n      return;\r\n    }\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    STORE<i32>(buff, index, FillStrokeStyleType.CanvasPattern);\r\n    STORE<i32>(buff, index + 1, load<i32>(changetype<usize>(value) + offsetof<CanvasPattern>(\"id\")));\r\n  }\r\n  //#endregion STROKEPATTERN\r\n\r\n  //#region STROKEGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeGradient property of the Canvas 2D API specifies the\r\n   * gradient to use for the strokes (outlines) around shapes. The default is null.\r\n   */\r\n  public get strokeGradient(): CanvasGradient | null {\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    var strokeStyleType: FillStrokeStyleType = <FillStrokeStyleType>LOAD<i32>(\r\n      buff,\r\n      index,\r\n    );\r\n    if (strokeStyleType == FillStrokeStyleType.CanvasGradient) {\r\n      var result: CanvasGradient = new CanvasGradient();\r\n      store<i32>(\r\n        changetype<usize>(result) + offsetof<CanvasGradient>(\"id\"),\r\n        LOAD<i32>(buff, index + 1),\r\n      );\r\n      return result;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public set strokeGradient(value: CanvasGradient | null) {\r\n    if (value == null) {\r\n      this.strokeStyle = defaultBlack;\r\n      return;\r\n    }\r\n    var index: i32 = this._stackOffset * 2;\r\n    var buff: ArrayBuffer = this._strokeStyleStack;\r\n    STORE<i32>(buff, index, FillStrokeStyleType.CanvasGradient);\r\n    STORE<i32>(buff, index + 1, load<i32>(changetype<usize>(value) + offsetof<CanvasGradient>(\"id\")));\r\n  }\r\n  //#endregion STROKEGRADIENT\r\n\r\n  //#region TEXTALIGN\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of TextAlign values.\r\n   */\r\n  private _textAlignStack: ArrayBuffer = setArrayBufferValue<TextAlign>(\r\n    new ArrayBuffer(0xFF * sizeof<TextAlign>()),\r\n    TextAlign.start,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentTextAlign: TextAlign = TextAlign.start;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text\r\n   * alignment used when drawing text.\r\n   *\r\n   * The alignment is relative to the x value of the fillText() method. For example, if textAlign is\r\n   * \"center\", then the text's left edge will be at x - (textWidth / 2).\r\n   */\r\n  public get textAlign(): TextAlign {\r\n    return LOAD<TextAlign>(this._textAlignStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set textAlign(value: TextAlign) {\r\n    STORE<TextAlign>(this._textAlignStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current textAlign value on the _textAlignStack to the\r\n   * buffer if it currently does not match the last written textAlign value.\r\n   */\r\n  @inline\r\n  private _updateTextAlign(): void {\r\n    var value: TextAlign = LOAD<TextAlign>(\r\n      this._textAlignStack,\r\n      <i32>this._stackOffset,\r\n    );\r\n    if (value != this._currentTextAlign) {\r\n      this._currentTextAlign = value;\r\n      super._writeOne(CanvasInstruction.TextAlign, <f64>value);\r\n    }\r\n  }\r\n  //#endregion TEXTALIGN\r\n\r\n  //#region TEXTBASELINE\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of TextBaseline values.\r\n   */\r\n  private _textBaselineStack: ArrayBuffer = setArrayBufferValue<TextBaseline>(\r\n    new ArrayBuffer(0xFF * sizeof<TextBaseline>()),\r\n    TextBaseline.alphabetic,\r\n  );\r\n\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentTextBaseline: TextBaseline = TextBaseline.alphabetic;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current\r\n   * text baseline used when drawing text.\r\n   */\r\n  public get textBaseline(): TextBaseline {\r\n    return LOAD<TextBaseline>(this._textBaselineStack, <i32>this._stackOffset);\r\n  }\r\n\r\n  public set textBaseline(value: TextBaseline) {\r\n    STORE<TextBaseline>(this._textBaselineStack, <i32>this._stackOffset, value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current textBaseline value on the _textBaselineStack to the\r\n   * buffer if it currently does not match the last written textBaseline value.\r\n   */\r\n  @inline\r\n  private _updateTextBaseline(): void {\r\n    var value: TextBaseline = LOAD<TextBaseline>(\r\n      this._textBaselineStack,\r\n      <i32>this._stackOffset,\r\n    );\r\n    if (value != this._currentTextBaseline) {\r\n      this._currentTextBaseline = value;\r\n      super._writeOne(CanvasInstruction.TextBaseline, <f64>value);\r\n    }\r\n  }\r\n  //#endregion TEXTBASELINE\r\n\r\n  //#region SAVE\r\n  /**\r\n   * An ArrayBuffer that contains 256 sets of bool values.\r\n   */\r\n  private _saveStack: ArrayBuffer = new ArrayBuffer(0xFF * sizeof<bool>());\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the\r\n   * canvas by pushing the current state onto a stack.\r\n   *\r\n   * The drawing state that gets saved onto a stack consists of:\r\n   *\r\n   * - The current transformation matrix.\r\n   * - The current clipping region.\r\n   * - The current dash list.\r\n   * - The current values of the following attributes: strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, lineDashOffset, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation, font, textAlign, textBaseline, direction, imageSmoothingEnabled.\r\n   *\r\n   * @param {bool} hard - Tells the context to perform an actual `save()` operation. Default value is false.\r\n   */\r\n  public save(hard: bool = false): void {\r\n    var offset: i32 = <i32>this._stackOffset;\r\n    var nextOffset: i32 = offset + 1;\r\n    if (nextOffset >= <i32>u8.MAX_VALUE) unreachable();\r\n    var transformIndex: i32 = offset * 6;\r\n    var nextTransformIndex: i32 = transformIndex + 6;\r\n    var styleIndex: i32 = offset << 1;\r\n    var nextStyleIndex = styleIndex + 2;\r\n\r\n    // currentTransform\r\n    var target: ArrayBuffer = this._transformStack;\r\n    STORE<f64>(target, nextTransformIndex, LOAD<f64>(target, transformIndex));\r\n    STORE<f64>(target, nextTransformIndex + 1, LOAD<f64>(target, transformIndex + 1));\r\n    STORE<f64>(target, nextTransformIndex + 2, LOAD<f64>(target, transformIndex + 2));\r\n    STORE<f64>(target, nextTransformIndex + 3, LOAD<f64>(target, transformIndex + 3));\r\n    STORE<f64>(target, nextTransformIndex + 4, LOAD<f64>(target, transformIndex + 4));\r\n    STORE<f64>(target, nextTransformIndex + 5, LOAD<f64>(target, transformIndex + 5));\r\n\r\n    // direction\r\n    target = this._directionStack;\r\n    STORE<CanvasDirection>(target, nextOffset, LOAD<CanvasDirection>(target, offset));\r\n\r\n    // fillStyle\r\n    target = this._fillStyleStack;\r\n    STORE<usize>(target, nextStyleIndex, LOAD<usize>(target, styleIndex));\r\n    STORE<usize>(target, nextStyleIndex + 1, LOAD<usize>(target, styleIndex + 1));\r\n\r\n    // filter\r\n    target = this._filterStack;\r\n    STORE<usize>(target, nextOffset, LOAD<usize>(target, offset));\r\n\r\n    // font\r\n    target = this._fontStack;\r\n    STORE<usize>(target, nextOffset, LOAD<usize>(target, offset));\r\n\r\n    // globalAlpha\r\n    target = this._globalAlphaStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // globalCompositeOperation\r\n    target = this._globalCompositeOperationStack;\r\n    STORE<GlobalCompositeOperation>(target, nextOffset, LOAD<GlobalCompositeOperation>(target, offset));\r\n\r\n    // imageSmoothingEnabled\r\n    target = this._imageSmoothingEnabledStack;\r\n    STORE<bool>(target, nextOffset, LOAD<bool>(target, offset));\r\n\r\n    // imageSmoothingQuality\r\n    target = this._imageSmoothingQualityStack;\r\n    STORE<ImageSmoothingQuality>(target, nextOffset, LOAD<ImageSmoothingQuality>(target, offset));\r\n\r\n    // lineCap\r\n    target = this._lineCapStack;\r\n    STORE<LineCap>(target, nextOffset, LOAD<LineCap>(target, offset));\r\n\r\n    // lineDash\r\n\r\n    /**\r\n     * Whenever a save occurs, if it would overwrite a reference that already exists, we must free\r\n     * it manually.\r\n     */\r\n    var nextLineDash: usize = LOAD<usize>(this._lineDashStack, nextOffset);\r\n    if (changetype<Float64Array>(nextLineDash) != null) {\r\n      // always free the underlying buffer FIRST\r\n      memory.free(changetype<usize>(changetype<Float64Array>(nextLineDash).buffer));\r\n      memory.free(nextLineDash);\r\n    }\r\n\r\n    STORE<usize>(this._lineDashStack, nextOffset, changetype<usize>(null));\r\n\r\n    // lineDashOffset\r\n    target = this._lineDashOffsetStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // lineJoin\r\n    target = this._lineJoinStack;\r\n    STORE<LineJoin>(target, nextOffset, LOAD<LineJoin>(target, offset));\r\n\r\n    // lineWidth\r\n    target = this._lineWidthStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // miterLimit\r\n    target = this._miterLimitStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // shadowBlur\r\n    target = this._shadowBlurStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // shadowColor\r\n    target = this._shadowColorStack;\r\n    STORE<usize>(target, nextOffset, LOAD<usize>(target, offset));\r\n\r\n    // shadowOffsetX\r\n    target = this._shadowOffsetXStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // shadowOffsetY\r\n    target = this._shadowOffsetYStack;\r\n    STORE<f64>(target, nextOffset, LOAD<f64>(target, offset));\r\n\r\n    // strokeStyle\r\n    target = this._strokeStyleStack;\r\n    STORE<usize>(target, nextStyleIndex, LOAD<usize>(target, styleIndex));\r\n    STORE<usize>(target, nextStyleIndex + 1, LOAD<usize>(target, styleIndex + 1));\r\n\r\n    // textBaseline\r\n    target = this._textBaselineStack;\r\n    STORE<TextBaseline>(target, nextOffset, LOAD<TextBaseline>(target, offset));\r\n\r\n    // textAlign\r\n    target = this._textAlignStack;\r\n    STORE<TextAlign>(target, nextOffset, LOAD<TextAlign>(target, offset));\r\n\r\n    if (hard) {\r\n      STORE<bool>(this._saveStack, nextOffset, true);\r\n      super._writeZero(CanvasInstruction.Save);\r\n    }\r\n\r\n    this._stackOffset = <u8>nextOffset;\r\n  }\r\n  //#endregion SAVE\r\n\r\n  //#region RESTORE\r\n  /**\r\n   * The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently\r\n   * saved canvas state by popping the top entry in the drawing state stack. If there is no saved\r\n   * state, this method does nothing.\r\n   *\r\n   * In the case of the hard restore, this function will mirror what the browser does, and modifies\r\n   * the last written values instead of just moving the stack pointer. This ensures that the writer\r\n   * emulates the browser state machine as accurately as possible.\r\n   */\r\n  public restore(): void {\r\n    if (this._stackOffset == <u8>0) return;\r\n    var currentOffset: i32 = <i32>this._stackOffset;\r\n    var nextOffset: i32 = currentOffset - 1;\r\n    var styleOffset: i32 = nextOffset * 2;\r\n    var target: ArrayBuffer;\r\n    var source: ArrayBuffer;\r\n    var transformOffset: i32 = nextOffset * 6;\r\n\r\n    if (LOAD<bool>(this._saveStack, currentOffset)) {\r\n      target = this._currentTransform;\r\n      source = this._transformStack;\r\n\r\n      // transformCurrent\r\n      STORE<f64>(target, 0, LOAD<f64>(source, transformOffset));\r\n      STORE<f64>(target, 1, LOAD<f64>(source, transformOffset + 1));\r\n      STORE<f64>(target, 2, LOAD<f64>(source, transformOffset + 2));\r\n      STORE<f64>(target, 3, LOAD<f64>(source, transformOffset + 3));\r\n      STORE<f64>(target, 4, LOAD<f64>(source, transformOffset + 4));\r\n      STORE<f64>(target, 5, LOAD<f64>(source, transformOffset + 5));\r\n\r\n      // direction\r\n      this._currentDirection = LOAD<CanvasDirection>(this._directionStack, nextOffset);\r\n\r\n      // fillStyle\r\n      source = this._fillStyleStack;\r\n      this._currentFillStyleType = <FillStrokeStyleType>LOAD<usize>(source, styleOffset);\r\n      this._currentFillStyleValue = LOAD<usize>(source, styleOffset + 1);\r\n\r\n      // filter\r\n      this._currentFilter = changetype<string>(LOAD<usize>(this._filterStack, nextOffset));\r\n\r\n      // font\r\n      this._currentFont = changetype<string>(LOAD<usize>(this._fontStack, nextOffset));\r\n\r\n      // globalAlpha\r\n      this._currentGlobalAlpha = LOAD<f64>(this._globalAlphaStack, nextOffset);\r\n\r\n      // globalCompositeOperation\r\n      this._currentGlobalCompositeOperation = LOAD<GlobalCompositeOperation>(this._globalCompositeOperationStack, nextOffset);\r\n\r\n      // imageSmoothingEnabled\r\n      this._currentImageSmoothingEnabled = LOAD<bool>(this._imageSmoothingEnabledStack, nextOffset);\r\n\r\n      // imageSmoothingQuality\r\n      this._currentImageSmoothingQuality = LOAD<ImageSmoothingQuality>(this._imageSmoothingQualityStack, nextOffset);\r\n\r\n      // lineCap\r\n      this._currentLineCap = LOAD<LineCap>(this._lineCapStack, nextOffset);\r\n\r\n      // lineDash\r\n      this._currentLineDash = changetype<Float64Array>(LOAD<usize>(this._lineDashStack, nextOffset));\r\n\r\n      // lineDashOffset\r\n      this._currentLineDashOffset = LOAD<f64>(this._lineDashOffsetStack, nextOffset);\r\n\r\n      // lineJoin\r\n      this._currentLineJoin = LOAD<LineJoin>(this._lineJoinStack, nextOffset);\r\n\r\n      // lineWidth\r\n      this._currentLineWidth = LOAD<f64>(this._lineWidthStack, nextOffset);\r\n\r\n      // miterLimit\r\n      this._currentMiterLimit = LOAD<f64>(this._miterLimitStack, nextOffset);\r\n\r\n      // shadowBlur\r\n      this._currentShadowBlur = LOAD<f64>(this._shadowBlurStack, nextOffset);\r\n\r\n      // shadowColor\r\n      this._currentShadowColor = changetype<string>(LOAD<usize>(this._shadowColorStack, nextOffset));\r\n\r\n      // shadowOffsetX\r\n      this._currentShadowOffsetX = LOAD<f64>(this._shadowOffsetXStack, nextOffset);\r\n\r\n      // shadowOffsetY\r\n      this._currentShadowOffsetY = LOAD<f64>(this._shadowOffsetYStack, nextOffset);\r\n\r\n      // strokeStyle\r\n      source = this._strokeStyleStack;\r\n      this._currentStrokeStyleType = <FillStrokeStyleType>LOAD<usize>(source, styleOffset);\r\n      this._currentStrokeStyleValue = LOAD<usize>(source, styleOffset + 1);\r\n\r\n      // textAlign\r\n      this._currentTextAlign = LOAD<TextAlign>(this._textAlignStack, nextOffset);\r\n\r\n      // textBaseline\r\n      this._currentTextBaseline = LOAD<TextBaseline>(this._textBaselineStack, nextOffset);\r\n      super._writeZero(CanvasInstruction.Restore);\r\n    }\r\n\r\n    this._stackOffset = <u8>nextOffset;\r\n  }\r\n  //#endregion RESTORE\r\n\r\n  //#region PATH\r\n  /**\r\n   * An internal array of path items.\r\n   */\r\n  private _path: Path2DElement[] = createPathElements();\r\n\r\n  /**\r\n   * The path offset is an index that always points to the next path index to be written to.\r\n   * Every time beginPath is called, this value should be set to 1.\r\n   */\r\n  private _pathOffset: i32 = 1;\r\n\r\n  /**\r\n   * The path buffer offset is an index that always points to the next path item to be written to\r\n   * the buffer. Every time beginPath is called, this value should be set to 0.\r\n   */\r\n  private _pathBufferOffset: i32 = 0;\r\n\r\n  /**\r\n   * An internal function that writes a single path item to the _path. \r\n   *\r\n   * @param {CanvasInstruction} inst - The CanvasInstruction that represents the current pathing\r\n   * operation that should be written to the path buffer.\r\n   * @param {bool} updateTransform - The bool value that determines if the PathElement should store\r\n   * the _currentTransform values.\r\n   * @param {i32} count - The number of parameters for this PathElement's instruction.\r\n   * @param {f64} a - The first parameter for this PathElement's instruction.\r\n   * @param {f64} b - The second parameter for this PathElement's instruction.\r\n   * @param {f64} c - The third parameter for this PathElement's instruction.\r\n   * @param {f64} d - The fourth parameter for this PathElement's instruction.\r\n   * @param {f64} e - The five parameter for this PathElement's instruction.\r\n   * @param {f64} f - The six parameter for this PathElement's instruction.\r\n   * @param {f64} g - The seven parameter for this PathElement's instruction.\r\n   * @param {f64} h - The eighth parameter for this PathElement's instruction.\r\n   */\r\n  @inline\r\n  private _writePath(\r\n    inst: CanvasInstruction,\r\n    updateTransform: bool = false,\r\n    count: i32 = 0,\r\n    a: f64 = 0.0,\r\n    b: f64 = 0.0,\r\n    c: f64 = 0.0,\r\n    d: f64 = 0.0,\r\n    e: f64 = 0.0,\r\n    f: f64 = 0.0,\r\n    g: f64 = 0.0,\r\n    h: f64 = 0.0,\r\n  ): void {\r\n    var el: Path2DElement = unchecked(this._path[this._pathOffset]);\r\n    var index: i32;\r\n    var current: ArrayBuffer;\r\n    el.instruction = inst;\r\n    el.updateTransform = updateTransform;\r\n    if (updateTransform) {\r\n      index = this._stackOffset * 6;\r\n      current = this._transformStack;\r\n      el.transformA = LOAD<f64>(current, index + 0);\r\n      el.transformB = LOAD<f64>(current, index + 1);\r\n      el.transformC = LOAD<f64>(current, index + 2);\r\n      el.transformD = LOAD<f64>(current, index + 3);\r\n      el.transformE = LOAD<f64>(current, index + 4);\r\n      el.transformF = LOAD<f64>(current, index + 5);\r\n    }\r\n    el.count = count;\r\n    el.a = a;\r\n    el.b = b;\r\n    el.c = c;\r\n    el.d = d;\r\n    el.e = e;\r\n    el.f = f;\r\n    el.g = g;\r\n    el.h = h;\r\n    ++this._pathOffset;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the queued up path items to the buffer. It optionally calls\r\n   * setTransform if the transform was modified between path calls.\r\n   */\r\n  @inline\r\n  private _updatePath(): void {\r\n    var end: i32 = this._pathOffset;\r\n    var el: Path2DElement;\r\n    var a: f64;\r\n    var b: f64;\r\n    var c: f64;\r\n    var d: f64;\r\n    var e: f64;\r\n    var f: f64;\r\n    var current: ArrayBuffer = this._currentTransform;\r\n    for (var i: i32 = this._pathBufferOffset; i <= end; i++) {\r\n      el = unchecked(this._path[i]);\r\n      if (el.updateTransform) {\r\n        a = el.transformA;\r\n        b = el.transformB;\r\n        c = el.transformC;\r\n        d = el.transformD;\r\n        e = el.transformE;\r\n        f = el.transformF;\r\n\r\n        if (\r\n          a != LOAD<f64>(current, 0) ||\r\n          b != LOAD<f64>(current, 1) ||\r\n          c != LOAD<f64>(current, 2) ||\r\n          d != LOAD<f64>(current, 3) ||\r\n          e != LOAD<f64>(current, 4) ||\r\n          f != LOAD<f64>(current, 5)\r\n        ) {\r\n          super._writeSix(CanvasInstruction.SetTransform, a, b, c, d, e, f);\r\n          STORE<f64>(current, 0, a);\r\n          STORE<f64>(current, 1, b);\r\n          STORE<f64>(current, 2, c);\r\n          STORE<f64>(current, 3, d);\r\n          STORE<f64>(current, 4, e);\r\n          STORE<f64>(current, 5, f);\r\n        }\r\n        switch (el.count) {\r\n          case 0: {\r\n            super._writeZero(el.instruction);\r\n            break;\r\n          }\r\n          case 1: {\r\n            super._writeOne(el.instruction, el.a);\r\n            break;\r\n          }\r\n          case 2: {\r\n            super._writeTwo(el.instruction, el.a, el.b);\r\n            break;\r\n          }\r\n          case 4: {\r\n            super._writeFour(el.instruction, el.a, el.b, el.c, el.d);\r\n            break;\r\n          }\r\n          case 5: {\r\n            super._writeFive(el.instruction, el.a, el.b, el.c, el.d, el.e);\r\n            break;\r\n          }\r\n          case 6: {\r\n            super._writeSix(el.instruction, el.a, el.b, el.c, el.d, el.e, el.f);\r\n            break;\r\n          }\r\n          case 8: {\r\n            super._writeEight(el.instruction, el.a, el.b, el.c, el.d, el.e, el.f, el.g, el.h);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //#endregion PATH\r\n\r\n  //#region ARC\r\n  /**\r\n   * The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to\r\n   * the current sub-path.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the arc's center.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the arc's center.\r\n   * @param {f64} radius - The arc's radius. Must be non-negative.\r\n   * @param {f64} startAngle - The angle at which the arc starts, measured clockwise from the positive x-axis\r\n   * and expressed in radians.\r\n   * @param {f64} endAngle - The angle at which the arc ends, measured clockwise from the positive x-axis and\r\n   * expressed in radians.\r\n   * @param {bool} anticlockwise - An optional bool which, if true, causes the arc to be drawn\r\n   * counter-clockwise between the start and end angles. The default value is false (clockwise).\r\n   */\r\n  public arc(x: f64, y: f64, radius: f64, startAngle: f64, endAngle: f64 , anticlockwise: bool = false): void {\r\n    if (!isFinite(x + y + radius + startAngle + endAngle) || radius < 0) return;\r\n    this._writePath(CanvasInstruction.Arc, true, 6, x, y, radius, startAngle, endAngle, anticlockwise ? 1.0 : 0.0);\r\n  }\r\n  //#endregion ARC\r\n\r\n  //#region ARCTO\r\n  /**\r\n   * The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current\r\n   * sub-path, using the given control points and radius. The arc is automatically connected to the\r\n   * path's latest point with a straight line, if necessary for the specified parameters. This method is\r\n   * commonly used for making rounded corners.\r\n   *\r\n   * @param {f64} x1 - The x-axis coordinate of the first control point.\r\n   * @param {f64} y1 - The y-axis coordinate of the first control point.\r\n   * @param {f64} x2 - The x-axis coordinate of the second control point.\r\n   * @param {f64} y2 - The y-axis coordinate of the second control point.\r\n   * @param {f64} radius - The arc's radius. Must be non-negative.\r\n   */\r\n  public arcTo(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64): void {\r\n    if (!isFinite(x1 + y1 + x2 + y2 + radius) || radius < 0) return;\r\n    this._writePath(CanvasInstruction.ArcTo, true, 5, x1, y1, x2, y2, radius);\r\n  }\r\n  //#endregion ARCTO\r\n\r\n  //#region BEGINPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by\r\n   * emptying the list of sub-paths. Call this method when you want to create a new path.\r\n   */\r\n  public beginPath(): void {\r\n    this._pathOffset = 1;\r\n    this._pathBufferOffset = 0;\r\n  }\r\n  //#endregion BEGINPATH\r\n\r\n  //#region BEZIERCURVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier\r\n   * curve to the current sub-path. It requires three points: the first two are control points and\r\n   * the third one is the end point. The starting point is the latest point in the current path, which\r\n   * can be changed using moveTo() before creating the Bézier curve.\r\n   *\r\n   * @param {f64} cp1x - The x-axis coordinate of the first control point.\r\n   * @param {f64} cp1y - The y-axis coordinate of the first control point.\r\n   * @param {f64} cp2x - The x-axis coordinate of the second control point.\r\n   * @param {f64} cp2y - The y-axis coordinate of the second control point.\r\n   * @param {f64} x - The x-axis coordinate of the end point.\r\n   * @param {f64} y - The y-axis coordinate of the end point.\r\n   */\r\n  public bezierCurveTo(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64): void {\r\n    if (!isFinite(cp1x + cp1y + cp2x + cp2y + x + y)) return;\r\n    this._writePath(CanvasInstruction.BezierCurveTo, true, 6, cp1x, cp1y, cp2x, cp2y, x, y);\r\n  }\r\n  //#endregion BEZIERCURVETO\r\n\r\n  //#region CLEARRECT\r\n  /**\r\n   * The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a\r\n   * rectangular area by setting them to transparent black.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public clearRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.ClearRect, x, y, width, height);\r\n  }\r\n  //#endregion CLEARRECT\r\n\r\n  //#region CLIP\r\n  /**\r\n   * The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path\r\n   * into the current clipping region. It replaces any previous clipping region. In the image below,\r\n   * the red outline represents a clipping region shaped like a star. Only those parts of the\r\n   * checkerboard pattern that are within the clipping region get drawn.\r\n   */\r\n  public clip(): void {\r\n    this._updatePath();\r\n    super._writeZero(CanvasInstruction.Clip);\r\n  }\r\n  //#endregion CLIP\r\n\r\n  //#region CLOSEPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight\r\n   * line from the current point to the start of the current sub-path. If the shape has already been\r\n   * closed or has only one point, this function does nothing. This method doesn't draw anything to\r\n   * the canvas directly. You can render the path using the stroke() or fill() methods.\r\n   */\r\n  public closePath(): void {\r\n    if (this._pathOffset == 1) return;\r\n    if (this._path[this._pathOffset - 1].instruction == CanvasInstruction.ClosePath) return;\r\n    this._writePath(CanvasInstruction.ClosePath, true, 0);\r\n  }\r\n  //#endregion CLOSEPATH\r\n\r\n  //#region DRAWIMAGE\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImagePosition() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   */\r\n  public drawImage(image: Image, dx: f64, dy: f64): void {\r\n    if (image == null || !isFinite(dx + dy) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      0.0, 0.0, <f64>image.width, <f64>image.height,\r\n      dx, dy, <f64>image.width, <f64>image.height,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImageSize() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dWidth - The width to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in width when drawn.\r\n   * @param {f64} dHeight - The height to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in height when drawn.\r\n   */\r\n  public drawImageSize(image: Image, dx: f64, dy: f64, dWidth: f64, dHeight: f64): void {\r\n    if (image == null || !isFinite(dx + dy + dWidth + dHeight) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      0.0, 0.0, <f64>image.width, <f64>image.height,\r\n      dx, dy, dWidth, dHeight,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImageSource() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} sx - The x-axis coordinate of the top left corner of the sub-rectangle of the source\r\n   * image to draw into the destination context.\r\n   * @param {f64} sy - The y-axis coordinate of the top left corner of the sub-rectangle of the source\r\n   * image to draw into the destination context.\r\n   * @param {f64} sWidth - The width of the sub-rectangle of the source image to draw into the\r\n   * destination context. If not specified, the entire rectangle from the coordinates specified by sx\r\n   * and sy to the bottom-right corner of the image is used.\r\n   * @param {f64} sHeight - The height of the sub-rectangle of the source image to draw into the\r\n   * destination context.\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dWidth - The width to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in width when drawn.\r\n   * @param {f64} dHeight - The height to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in height when drawn.\r\n   */\r\n  public drawImageSource(image: Image, sx: f64, sy: f64, sWidth: f64, sHeight: f64, dx: f64, dy: f64, dWidth: f64, dHeight: f64): void {\r\n    if (image == null || !isFinite(sx + sy + sWidth + sHeight + dx + dy + dWidth + dHeight) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      sx, sy, sWidth, sHeight,\r\n      dx, dy, dWidth, dHeight,\r\n    );\r\n  }\r\n  //#endregion DRAWIMAGE\r\n\r\n  //#region ELLIPSE\r\n  /**\r\n   * The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the ellipse's center.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the ellipse's center.\r\n   * @param {f64} radiusX - The ellipse's major-axis radius. Must be non-negative.\r\n   * @param {f64} radiusY - The ellipse's minor-axis radius. Must be non-negative.\r\n   * @param {f64} rotation - The rotation of the ellipse, expressed in radians.\r\n   * @param {f64} startAngle - The angle at which the ellipse starts, measured clockwise from the positive x-axis\r\n   * and expressed in radians.\r\n   * @param {f64} endAngle - The angle at which the ellipse ends, measured clockwise from the positive x-axis and\r\n   * expressed in radians.\r\n   * @param {bool} anticlockwise - An optional Boolean which, if true, draws the ellipse anticlockwise\r\n   * (counter-clockwise). The default value is false (clockwise).\r\n   */\r\n  public ellipse(x: f64, y: f64, radiusX: f64, radiusY: f64, rotation: f64, startAngle: f64, endAngle: f64, anticlockwise: bool = false): void {\r\n    if (!isFinite(x + y + radiusX + radiusY + rotation + startAngle + endAngle) || radiusX < 0 || radiusY < 0) return;\r\n    this._writePath(\r\n      CanvasInstruction.Ellipse,\r\n      true, 8,\r\n      x, y, radiusX, radiusY,\r\n      rotation, startAngle, endAngle, anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n  //#endregion ELLIPSE\r\n\r\n  //#region FILL\r\n  /**\r\n   * The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path\r\n   * with the current fillStyle.\r\n   *\r\n   * @param {FillRule} fillRule - The algorithm by which to determine if a point is inside or\r\n   * outside the filling region.\r\n   *\r\n   * Possible values:\r\n   * - `FillRule.nonzero`: The non-zero winding rule. Default rule.\r\n   * - `FillRule.evenodd`: The even-odd winding rule.\r\n   */\r\n  public fill(fillRule: FillRule = FillRule.nonzero): void {\r\n    /**\r\n     * If there are no items on the path, there is no reason to fill. Index 1 means the path buffer\r\n     * is pointing to a single `beginPath()` operation and it does not matter if fill is called at\r\n     * this point.\r\n     */\r\n    if (this._pathOffset == 1) return;\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n\r\n    /**\r\n     * This function must be called *before* _updateTransform(), because both the path operations and the\r\n     * fill operations affect the transform. Each pathing operation has it's own transform, and the\r\n     * transform value when the fill operation occurs might be different.\r\n     */\r\n    this._updatePath();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    super._writeOne(CanvasInstruction.Fill, <f64>fillRule);\r\n  }\r\n  //#endregion FILL\r\n\r\n  //#region FILLRECT\r\n  /**\r\n   * The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is\r\n   * filled according to the current fillStyle. This method draws directly to the canvas without\r\n   * modifying the current path, so any subsequent fill() or stroke() calls will have no effect on\r\n   * it.\r\n   *\r\n   * @param x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param width - The rectangle's width. Positive values are to the right, and negative to the\r\n   * left.\r\n   * @param height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public fillRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.FillRect, x, y, width, height);\r\n  }\r\n  //#endregion FILLRECT\r\n\r\n  //#region FILLTEXT\r\n  /**\r\n   * The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string\r\n   * at the specified coordinates, filling the string's characters with the current fillStyle. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. The text is rendered using the font and text layout\r\n   * configuration as defined by the font, textAlign, textBaseline, and direction properties.\r\n   *\r\n   * The fillText function can accept an optional maxWidth property. Use the fillTextWidth function\r\n   * to enable the use of that parameter.\r\n   *\r\n   * @param text - A DOMString specifying the text string to render into the context. The text is\r\n   * rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param x - The x-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param y - The y-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   */\r\n  public fillText(text: string, x: f64, y: f64): void {\r\n    if (!isFinite(x + y) || text == null || text.length == 0) return;\r\n    this._updateDirection();\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._writeThree(CanvasInstruction.FillText, <f64>changetype<usize>(text), x, y);\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string\r\n   * at the specified coordinates, filling the string's characters with the current fillStyle. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. The text is rendered using the font and text layout\r\n   * configuration as defined by the font, textAlign, textBaseline, and direction properties.\r\n   *\r\n   * The fillText function can accept an optional maxWidth property. Use the fillTextWidth function\r\n   * to enable the use of that parameter.\r\n   *\r\n   * @param text - A DOMString specifying the text string to render into the context. The text is\r\n   * rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param x - The x-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param y - The y-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param maxWidth - The maximum number of pixels wide the text may be once rendered. If not\r\n   * specified, there is no limit to the width of the text. However, if this value is provided, the\r\n   * user agent will adjust the kerning, select a more horizontally condensed font (if one is available or can be generated without loss of quality), or scale down to a smaller font size in order to fit the text in the specified width.\r\n   */\r\n  public fillTextWidth(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    if (!isFinite(x + y + maxWidth) || text == null || text.length == 0 || maxWidth < 0) return;\r\n    this._updateDirection();\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.FillTextWidth, <f64>changetype<usize>(text), x, y, maxWidth);\r\n  }\r\n  //#endregion FILLTEXT\r\n\r\n  //#region ISPOINTINPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not\r\n   * the specified point is contained in the current path. It forces a commit to flush all the\r\n   * current instructions to the buffer, updates the path, and then performs a pointInPath function\r\n   * call on the canvas.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the point to check.\r\n   * @param {f64} y - The y-axis coordinate of the point to check.\r\n   * @param {FillRule} fillRule - The algorithm by which to determine if a point is inside or\r\n   * outside the path.\r\n   *\r\n   * Possible values:\r\n   * - `FillRule.nonzero`: The non-zero winding rule. Default rule.\r\n   * - `FillRule.evenodd`: The even-odd winding rule.\r\n   */\r\n  public isPointInPath(x: f64, y: f64, fillRule: FillRule = FillRule.nonzero): bool {\r\n    if (!isFinite(x + y)) return false;\r\n    this._updatePath();\r\n    this.commit();\r\n    return isPointInPath(this.id, x, y, fillRule);\r\n  }\r\n  //#endregion ISPOINTINPATH\r\n\r\n  //#region ISPOINTINSTROKE\r\n  /**\r\n   * The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or\r\n   * not the specified point is inside the area contained by the stroking of a path. It forces a\r\n   * commit to flush all the current instructions to the buffer, updates the path, and then performs\r\n   * a pointInPath function call on the canvas.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the point to check.\r\n   * @param {f64} y - The y-axis coordinate of the point to check.\r\n   */\r\n  public isPointInStroke(x: f64, y: f64): bool {\r\n    if (!isFinite(x + y)) return false;\r\n    this._updatePath();\r\n    this.commit();\r\n    return isPointInStroke(this.id, x, y);\r\n  }\r\n  //#endregion ISPOINTINSTROKE\r\n\r\n  //#region LINETO\r\n  /**\r\n   * The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line\r\n   * to the current sub-path by connecting the sub-path's last point to the specified (x, y)\r\n   * coordinates. Like other methods that modify the current path, this method does not directly\r\n   * render anything. To draw the path onto a canvas, you can use the fill() or stroke() methods.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the line's end point.\r\n   * @param {f64} y - The y-axis coordinate of the line's end point.\r\n   */\r\n  public lineTo(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n    this._writePath(CanvasInstruction.LineTo, true, 2, x, y);\r\n  }\r\n  //#endregion LINETO\r\n\r\n  //#region MEASURETEXT\r\n  /**\r\n   * The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains\r\n   * information about the measured text (such as its width, for example). The as2d implementation\r\n   * only returns the resulting width property value.\r\n   *\r\n   * @param {string} text - The text string to measure.\r\n   */\r\n  public measureText(text: string): f64 {\r\n    this._updateFont();\r\n    this.commit();\r\n    return measureText(this.id, text);\r\n  }\r\n  //#endregion MEASURETEXT\r\n\r\n  //#region MOVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the\r\n   * point specified by the given (x, y) coordinates.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the point.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the point.\r\n   */\r\n  public moveTo(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n    this._writePath(CanvasInstruction.MoveTo, true, 2, x, y);\r\n  }\r\n  //#endregion MOVETO\r\n\r\n  //#region QUADRATICCURVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic\r\n   * Bézier curve to the current sub-path. It requires two points: the first one is a control point\r\n   * and the second one is the end point. The starting point is the latest point in the current\r\n   * path, which can be changed using moveTo() before creating the quadratic Bézier curve.\r\n   *\r\n   * @param cpx - The x-axis coordinate of the control point.\r\n   * @param cpy - The y-axis coordinate of the control point.\r\n   * @param x - The x-axis coordinate of the end point.\r\n   * @param y - The y-axis coordinate of the end point.\r\n   */\r\n  public quadraticCurveTo(cpx: f64, cpy: f64, x: f64, y: f64): void {\r\n    if (!isFinite(cpx + cpy + x + y)) return;\r\n    this._writePath(CanvasInstruction.QuadraticCurveTo, true, 4, cpx, cpy, x, y);\r\n  }\r\n  //#endregion QUADRATICCURVETO\r\n\r\n  //#region RECT\r\n  /**\r\n   * The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current\r\n   * path. Like other methods that modify the current path, this method does not directly render\r\n   * anything. To draw the rectangle onto a canvas, you can use the fill() or stroke() methods.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._writePath(CanvasInstruction.Rect, true, 4, x, y, width, height);\r\n  }\r\n  //#endregion RECT\r\n\r\n  //#region RESETTRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current\r\n   * transform to the identity matrix.\r\n   */\r\n  public resetTransform(): void {\r\n    this.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);\r\n  }\r\n  //#endregion RESETTRANSFORM\r\n\r\n  //#region ROTATE\r\n  /**\r\n   * The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the\r\n   * transformation matrix.\r\n   *\r\n   * @param {f64} angle - The rotation angle, clockwise in radians. You can use\r\n   * `degree * Math.PI / 180` if you want to calculate from a degree value.\r\n   */\r\n  public rotate(angle: f64): void {\r\n    var index: i32 = this._stackOffset * 6;\r\n    var current: ArrayBuffer = this._transformStack;\r\n    var a: f64 = LOAD<f64>(current, index);\r\n    var b: f64 = LOAD<f64>(current, index + 1);\r\n    var c: f64 = LOAD<f64>(current, index + 2);\r\n    var d: f64 = LOAD<f64>(current, index + 3);\r\n    var cos: f64 = Math.cos(angle);\r\n    var sin: f64 = Math.sin(angle);\r\n    STORE<f64>(current, index, a * cos + c * sin);\r\n    STORE<f64>(current, index + 1, b * cos + d * sin);\r\n    STORE<f64>(current, index + 2, c * cos - a * sin);\r\n    STORE<f64>(current, index + 3, d * cos - b * sin);\r\n  }\r\n  //#endregion ROTATE\r\n\r\n  //#region SCALE\r\n  /**\r\n   * The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation\r\n   * to the canvas units horizontally and/or vertically. By default, one unit on the canvas is\r\n   * exactly one pixel. A scaling transformation modifies this behavior. For instance, a scaling\r\n   * factor of 0.5 results in a unit size of 0.5 pixels; shapes are thus drawn at half the normal\r\n   * size. Similarly, a scaling factor of 2.0 increases the unit size so that one unit becomes two\r\n   * pixels; shapes are thus drawn at twice the normal size.\r\n   *\r\n   * @param {f64} x - Scaling factor in the horizontal direction. A negative value flips pixels\r\n   * across the vertical axis. A value of 1 results in no horizontal scaling.\r\n   * @param {f64} y - Scaling factor in the vertical direction. A negative value flips pixels across\r\n   * the horizontal axis. A value of 1 results in no vertical scaling.\r\n   */\r\n  public scale(x: f64, y: f64): void {\r\n    var index: i32 = this._stackOffset * 6;\r\n    var current: ArrayBuffer = this._transformStack;\r\n    STORE<f64>(current, index, LOAD<f64>(current, index) * x);\r\n    STORE<f64>(current, index + 1, LOAD<f64>(current, index + 1) * x);\r\n    STORE<f64>(current, index + 2, LOAD<f64>(current, index + 2) * y);\r\n    STORE<f64>(current, index + 3, LOAD<f64>(current, index + 3) * y);\r\n  }\r\n  //#endregion SCALE\r\n\r\n  //#region SETTRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the\r\n   * current transformation to the identity matrix, and then invokes a transformation described by\r\n   * the arguments of this method. This lets you scale, rotate, translate (move), and skew the\r\n   * context.\r\n   *\r\n   * @param {f64} a - Horizontal scaling. A value of 1 results in no scaling.\r\n   * @param {f64} b - Vertical skewing.\r\n   * @param {f64} c - Horizontal skewing.\r\n   * @param {f64} d - Vertical scaling. A value of 1 results in no scaling.\r\n   * @param {f64} e - Horizontal translation (moving).\r\n   * @param {f64} f - Vertical translation (moving).\r\n   */\r\n  public setTransform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var index: i32 = this._stackOffset * 6;\r\n    var current: ArrayBuffer = this._transformStack;\r\n    STORE<f64>(current, index, a);\r\n    STORE<f64>(current, index + 1, b);\r\n    STORE<f64>(current, index + 2, c);\r\n    STORE<f64>(current, index + 3, d);\r\n    STORE<f64>(current, index + 4, e);\r\n    STORE<f64>(current, index + 5, f);\r\n  }\r\n  //#endregion SETTRANSFORM\r\n\r\n  //#region STROKE\r\n  /**\r\n   * The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the\r\n   * current or given path with the current stroke style. Strokes are aligned to the center of a\r\n   * path; in other words, half of the stroke is drawn on the inner side, and half on the outer\r\n   * side. The stroke is drawn using the non-zero winding rule, which means that path intersections\r\n   * will still get filled.\r\n   */\r\n  public stroke(): void {\r\n    /**\r\n     * If there are no items on the path, there is no reason to fill. Index 1 means the path buffer\r\n     * is pointing to a single `beginPath()` operation and it does not matter if fill is called at\r\n     * this point.\r\n     */\r\n    if (this._pathOffset == 1) return;\r\n    /**\r\n     * If the lineWidth is zero, there is no line and it does not matter if ctx.stroke() is called.\r\n     */\r\n    if (LOAD<f64>(this._lineWidthStack, this._stackOffset) <= 0.0) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updatePath();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTransform();\r\n    super._writeZero(CanvasInstruction.Stroke);\r\n  }\r\n  //#endregion STROKE\r\n\r\n  //#region STROKERECT\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is\r\n   * stroked (outlined) according to the current strokeStyle and other context settings. This method\r\n   * draws directly to the canvas without modifying the current path, so any subsequent fill() or\r\n   * stroke() calls will have no effect on it.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public strokeRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    /**\r\n     * If the lineWidth is zero, there is no line and it does not matter if ctx.stroke() is called.\r\n     */\r\n    if (LOAD<f64>(this._lineWidthStack, this._stackOffset) <= 0.0) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.StrokeRect, x, y, width, height);\r\n  }\r\n  //#endregion STROKERECT\r\n\r\n  //#region STROKETEXT\r\n  /**\r\n   * The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes — that is,\r\n   * draws the outlines of — the characters of a text string at the specified coordinates. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. To use the maxWidth parameter, use the strokeTextWidth\r\n   * function.\r\n   *\r\n   * @param {string} text - A DOMString specifying the text string to render into the context. The\r\n   * text is rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param {f64} x - The x-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} y - The y-axis coordinate of the point at which to begin drawing the text.\r\n   */\r\n  public strokeText(text: string, x: f64, y: f64): void {\r\n    this._updateDirection();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._writeThree(CanvasInstruction.StrokeText, <f64>changetype<usize>(text), x, y)\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D method strokeTextWidth(), part of the Canvas 2D API, strokes —\r\n   * that is, draws the outlines of — the characters of a text string at the specified coordinates.\r\n   * An optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. To use the maxWidth parameter, use the strokeTextWidth\r\n   * function.\r\n   *\r\n   * @param {string} text - A DOMString specifying the text string to render into the context. The\r\n   * text is rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param {f64} x - The x-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} y - The y-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} maxWidth - The maximum width the text may be once rendered. If not specified,\r\n   * there is no limit to the width of the text. However, if this value is provided, the user agent\r\n   * will adjust the kerning, select a more horizontally condensed font (if one is available or can\r\n   * be generated without loss of quality), or scale down to a smaller font size in order to fit the\r\n   * text in the specified width.\r\n   */\r\n  public strokeTextWidth(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    this._updateDirection();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.StrokeTextWidth, <f64>changetype<usize>(text), x, y, maxWidth);\r\n  }\r\n  //#endregion STROKETEXT\r\n\r\n  //#region TRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current\r\n   * transformation with the matrix described by the arguments of this method. This lets you scale,\r\n   * rotate, translate (move), and skew the context.\r\n   *\r\n   * @param {f64} a - Horizontal scaling. A value of 1 results in no scaling.\r\n   * @param {f64} b - Vertical skewing.\r\n   * @param {f64} c - Horizontal skewing.\r\n   * @param {f64} d - Vertical scaling. A value of 1 results in no scaling.\r\n   * @param {f64} e - Horizontal translation (moving).\r\n   * @param {f64} f - Vertical translation (moving).\r\n   */\r\n  public transform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var current: ArrayBuffer = this._transformStack;\r\n    var index: i32 = this._stackOffset * 6;\r\n    var sa: f64 = LOAD<f64>(current, index);\r\n    var sb: f64 = LOAD<f64>(current, index + 1);\r\n    var sc: f64 = LOAD<f64>(current, index + 2);\r\n    var sd: f64 = LOAD<f64>(current, index + 3);\r\n    var se: f64 = LOAD<f64>(current, index + 4);\r\n    var sf: f64 = LOAD<f64>(current, index + 5);\r\n\r\n    STORE<f64>(current, index, sa * a + sc * b);\r\n    STORE<f64>(current, index + 1, sb * a + sd * b);\r\n    STORE<f64>(current, index + 2, sa * c + sc * d);\r\n    STORE<f64>(current, index + 3, sb * c + sd * d);\r\n    STORE<f64>(current, index + 4, sa * e + sc * f + se);\r\n    STORE<f64>(current, index + 5, sb * e + sd * f + sf);\r\n  }\r\n  //#endregion TRANSFORM\r\n\r\n  //#region TRANSLATE\r\n  /**\r\n   * The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation\r\n   * transformation to the current matrix.\r\n   * @param {f64} x - Distance to move in the horizontal direction. Positive values are to the\r\n   * right, and negative to the left.\r\n   * @param {f64} y - Distance to move in the vertical direction. Positive values are down, and\r\n   * negative are up.\r\n   */\r\n  public translate(x: f64, y: f64): void {\r\n    var current: ArrayBuffer = this._transformStack;\r\n    var index: i32 = this._stackOffset * 6;\r\n\r\n    // e = e + a * x + c * y;\r\n    STORE<f64>(\r\n      current,\r\n      index + 5,\r\n      LOAD<f64>(current, index + 5) + LOAD<f64>(current, index) * x + LOAD<f64>(current, index + 2) * y,\r\n    );\r\n\r\n    // f = f + b * x + d * y;\r\n    STORE<f64>(\r\n      current,\r\n      index + 6,\r\n      LOAD<f64>(current, index + 6) + LOAD<f64>(current, index + 1) * x + LOAD<f64>(current, index + 3) * y,\r\n    );\r\n  }\r\n  //#endregion TRANSLATE\r\n\r\n  public commit(): void {\r\n    super._writeZero(CanvasInstruction.Commit);\r\n    render(this.id, this._buffer.data);\r\n    super._resetBuffer();\r\n  }\r\n}\r\n","import {\r\n  HEADER_SIZE as AB_HEADER_SIZE,\r\n  MAX_BLENGTH as AB_MAX_BLENGTH,\r\n  allocateUnsafe,\r\n  LOAD,\r\n  STORE\r\n} from \"./arraybuffer\";\r\n\r\nimport {\r\n  SORT as SORT_IMPL\r\n} from \"./sort\";\r\n\r\n/** Typed array base class. Not a global object. */\r\nexport abstract class TypedArray<T> {\r\n  [key: number]: T; // compatibility only\r\n\r\n  readonly buffer: ArrayBuffer;\r\n  readonly byteOffset: i32;\r\n  readonly byteLength: i32;\r\n\r\n  constructor(length: i32) {\r\n    const MAX_LENGTH = <u32>AB_MAX_BLENGTH / sizeof<T>();\r\n    if (<u32>length > MAX_LENGTH) throw new RangeError(\"Invalid typed array length\");\r\n    var byteLength = length << alignof<T>();\r\n    var buffer = allocateUnsafe(byteLength);\r\n    memory.fill(changetype<usize>(buffer) + AB_HEADER_SIZE, 0, <usize>byteLength);\r\n    this.buffer = buffer;\r\n    this.byteOffset = 0;\r\n    this.byteLength = byteLength;\r\n  }\r\n\r\n  @inline\r\n  get length(): i32 {\r\n    return this.byteLength >>> alignof<T>();\r\n  }\r\n\r\n  @operator(\"[]\")\r\n  protected __get(index: i32): T {\r\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\r\n    return LOAD<T>(this.buffer, index, this.byteOffset);\r\n  }\r\n\r\n  @inline @operator(\"{}\")\r\n  protected __unchecked_get(index: i32): T {\r\n    return LOAD<T>(this.buffer, index, this.byteOffset);\r\n  }\r\n\r\n  @operator(\"[]=\")\r\n  protected __set(index: i32, value: NATIVE<T>): void {\r\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\r\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\r\n  }\r\n\r\n  @inline @operator(\"{}=\")\r\n  protected __unchecked_set(index: i32, value: NATIVE<T>): void {\r\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\r\n  }\r\n\r\n  // copyWithin(target: i32, start: i32, end: i32 = this.length): this\r\n}\r\n\r\n@inline\r\nexport function FILL<TArray extends TypedArray<T>, T extends number>(\r\n  array: TArray,\r\n  value: NATIVE<T>,\r\n  start: i32,\r\n  end: i32\r\n): TArray {\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  var len = array.length;\r\n  start = start < 0 ? max(len + start, 0) : min(start, len);\r\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\r\n  if (sizeof<T>() == 1) {\r\n    if (start < end) {\r\n      memory.fill(\r\n        changetype<usize>(buffer) + start + byteOffset + AB_HEADER_SIZE,\r\n        <u8>value,\r\n        <usize>(end - start)\r\n      );\r\n    }\r\n  } else {\r\n    for (; start < end; ++start) {\r\n      STORE<T,NATIVE<T>>(buffer, start, value, byteOffset);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n@inline\r\nexport function SORT<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  comparator: (a: T, b: T) => i32\r\n): TArray {\r\n  var byteOffset = array.byteOffset;\r\n  var length = array.length;\r\n  if (length <= 1) return array;\r\n  var buffer = array.buffer;\r\n  if (length == 2) {\r\n    let a = LOAD<T>(buffer, 1, byteOffset);\r\n    let b = LOAD<T>(buffer, 0, byteOffset);\r\n    if (comparator(a, b) < 0) {\r\n      STORE<T>(buffer, 1, b, byteOffset);\r\n      STORE<T>(buffer, 0, a, byteOffset);\r\n    }\r\n    return array;\r\n  }\r\n  SORT_IMPL<T>(buffer, byteOffset, length, comparator);\r\n  return array;\r\n}\r\n\r\n@inline\r\nexport function SUBARRAY<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  begin: i32,\r\n  end: i32\r\n): TArray {\r\n  var length = <i32>array.length;\r\n  if (begin < 0) begin = max(length + begin, 0);\r\n  else begin = min(begin, length);\r\n  if (end < 0) end = max(length + end, begin);\r\n  else end = max(min(end, length), begin);\r\n  var slice = memory.allocate(offsetof<TArray>());\r\n  store<usize>(slice, array.buffer, offsetof<TArray>(\"buffer\"));\r\n  store<i32>(slice, <i32>array.byteOffset + (begin << alignof<T>()), offsetof<TArray>(\"byteOffset\"));\r\n  store<i32>(slice, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\r\n  return changetype<TArray>(slice);\r\n}\r\n\r\n@inline\r\nexport function REDUCE<TArray extends TypedArray<T>, T, TRet>(\r\n  array: TArray,\r\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\r\n  initialValue: TRet\r\n): TRet {\r\n  var length = array.length;\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  for (let i = 0; i < length; i++) {\r\n    initialValue = callbackfn(\r\n      initialValue,\r\n      LOAD<T>(buffer, i, byteOffset),\r\n      i,\r\n      array,\r\n    );\r\n  }\r\n  return initialValue;\r\n}\r\n\r\n@inline\r\nexport function REDUCE_RIGHT<TArray extends TypedArray<T>, T, TRet>(\r\n  array: TArray,\r\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\r\n  initialValue: TRet\r\n): TRet {\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  for (let i = array.length - 1; i >= 0; i--) {\r\n    initialValue = callbackfn(\r\n      initialValue,\r\n      LOAD<T>(buffer, i, byteOffset),\r\n      i,\r\n      array,\r\n    );\r\n  }\r\n  return initialValue;\r\n}\r\n\r\n@inline\r\nexport function MAP<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  callbackfn: (value: T, index: i32, self: TArray) => T,\r\n): TArray {\r\n  var length = array.length;\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  var result = instantiate<TArray>(length);\r\n  var resultBuffer = result.buffer;\r\n  for (let i = 0; i < length; i++) {\r\n    STORE<T, NATIVE<T>>(resultBuffer, i, <NATIVE<T>>callbackfn(LOAD<T>(buffer, i, byteOffset), i, array));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n@inline\r\nexport function FIND_INDEX<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\r\n): i32 {\r\n  var length = array.length;\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  for (let i = 0; i < length; i++) {\r\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n@inline\r\nexport function SOME<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\r\n): bool {\r\n  var length = array.length;\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  for (let i = 0; i < length; i++) {\r\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n@inline\r\nexport function EVERY<TArray extends TypedArray<T>, T>(\r\n  array: TArray,\r\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\r\n): bool {\r\n  var length = array.length;\r\n  var buffer = array.buffer;\r\n  var byteOffset = array.byteOffset;\r\n  for (let i = 0; i < length; i++) {\r\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\r\n      continue;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","import { memcmp, memmove, memset } from \"./internal/memory\";\r\n\r\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\r\n\r\n/* tslint:disable */\r\n\r\nexport namespace memory {\r\n\r\n  @builtin export declare function size(): i32;\r\n\r\n  @builtin export declare function grow(pages: i32): i32;\r\n\r\n  @builtin @inline\r\n  export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\r\n    memset(dest, c, n); // fallback if \"bulk-memory\" isn't enabled\r\n  }\r\n\r\n  @builtin @inline\r\n  export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\r\n    memmove(dest, src, n); // fallback if \"bulk-memory\" isn't enabled\r\n  }\r\n\r\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\r\n    return memcmp(vl, vr, n);\r\n  }\r\n\r\n  // Passive segments\r\n\r\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\r\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\r\n  // }\r\n\r\n  // export function drop(segmentIndex: u32): void {\r\n  //   __memory_drop(segmentIndex);\r\n  // }\r\n\r\n  // Allocator\r\n\r\n  @inline export function allocate(size: usize): usize {\r\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\r\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\r\n    return <usize>unreachable();\r\n  }\r\n\r\n  @inline export function free(ptr: usize): void {\r\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\r\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\r\n    unreachable();\r\n  }\r\n\r\n  @inline export function reset(): void {\r\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\r\n    unreachable();\r\n  }\r\n}\r\n","/**\r\n * Arena Memory Allocator\r\n *\r\n * Provides a `memory.reset` function to reset the heap to its initial state. A user has to make\r\n * sure that there are no more references to cleared memory afterwards. Always aligns to 8 bytes.\r\n *\r\n * @module std/assembly/allocator/arena\r\n *//***/\r\n\r\nimport { AL_MASK, MAX_SIZE_32 } from \"../internal/allocator\";\r\n\r\nvar startOffset: usize = (HEAP_BASE + AL_MASK) & ~AL_MASK;\r\nvar offset: usize = startOffset;\r\n\r\n// Memory allocator interface\r\n\r\n@global export function __memory_allocate(size: usize): usize {\r\n  if (size > MAX_SIZE_32) unreachable();\r\n  var ptr = offset;\r\n  var newPtr = (ptr + max<usize>(size, 1) + AL_MASK) & ~AL_MASK;\r\n  var pagesBefore = memory.size();\r\n  if (newPtr > <usize>pagesBefore << 16) {\r\n    let pagesNeeded = ((newPtr - ptr + 0xffff) & ~0xffff) >>> 16;\r\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\r\n    if (memory.grow(pagesWanted) < 0) {\r\n      if (memory.grow(pagesNeeded) < 0) {\r\n        unreachable(); // out of memory\r\n      }\r\n    }\r\n  }\r\n  offset = newPtr;\r\n  return ptr;\r\n}\r\n\r\n@global export function __memory_free(ptr: usize): void { /* nop */ }\r\n\r\n@global export function __memory_reset(): void {\r\n  offset = startOffset;\r\n}\r\n","// this function will go away once `memory.copy` becomes an intrinsic\r\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\r\n  var w: u32, x: u32;\r\n\r\n  // copy 1 byte each until src is aligned to 4 bytes\r\n  while (n && (src & 3)) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n    n--;\r\n  }\r\n\r\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\r\n  if ((dest & 3) == 0) {\r\n    while (n >= 16) {\r\n      store<u32>(dest     , load<u32>(src     ));\r\n      store<u32>(dest +  4, load<u32>(src +  4));\r\n      store<u32>(dest +  8, load<u32>(src +  8));\r\n      store<u32>(dest + 12, load<u32>(src + 12));\r\n      src += 16; dest += 16; n -= 16;\r\n    }\r\n    if (n & 8) {\r\n      store<u32>(dest    , load<u32>(src    ));\r\n      store<u32>(dest + 4, load<u32>(src + 4));\r\n      dest += 8; src += 8;\r\n    }\r\n    if (n & 4) {\r\n      store<u32>(dest, load<u32>(src));\r\n      dest += 4; src += 4;\r\n    }\r\n    if (n & 2) { // drop to 2 bytes each\r\n      store<u16>(dest, load<u16>(src));\r\n      dest += 2; src += 2;\r\n    }\r\n    if (n & 1) { // drop to 1 byte\r\n      store<u8>(dest++, load<u8>(src++));\r\n    }\r\n    return;\r\n  }\r\n\r\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\r\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\r\n  if (n >= 32) {\r\n    switch (dest & 3) {\r\n      // known to be != 0\r\n      case 1: {\r\n        w = load<u32>(src);\r\n        store<u8>(dest++, load<u8>(src++));\r\n        store<u8>(dest++, load<u8>(src++));\r\n        store<u8>(dest++, load<u8>(src++));\r\n        n -= 3;\r\n        while (n >= 17) {\r\n          x = load<u32>(src + 1);\r\n          store<u32>(dest, w >> 24 | x << 8);\r\n          w = load<u32>(src + 5);\r\n          store<u32>(dest + 4, x >> 24 | w << 8);\r\n          x = load<u32>(src + 9);\r\n          store<u32>(dest + 8, w >> 24 | x << 8);\r\n          w = load<u32>(src + 13);\r\n          store<u32>(dest + 12, x >> 24 | w << 8);\r\n          src += 16; dest += 16; n -= 16;\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        w = load<u32>(src);\r\n        store<u8>(dest++, load<u8>(src++));\r\n        store<u8>(dest++, load<u8>(src++));\r\n        n -= 2;\r\n        while (n >= 18) {\r\n          x = load<u32>(src + 2);\r\n          store<u32>(dest, w >> 16 | x << 16);\r\n          w = load<u32>(src + 6);\r\n          store<u32>(dest + 4, x >> 16 | w << 16);\r\n          x = load<u32>(src + 10);\r\n          store<u32>(dest + 8, w >> 16 | x << 16);\r\n          w = load<u32>(src + 14);\r\n          store<u32>(dest + 12, x >> 16 | w << 16);\r\n          src += 16; dest += 16; n -= 16;\r\n        }\r\n        break;\r\n      }\r\n      case 3: {\r\n        w = load<u32>(src);\r\n        store<u8>(dest++, load<u8>(src++));\r\n        n -= 1;\r\n        while (n >= 19) {\r\n          x = load<u32>(src + 3);\r\n          store<u32>(dest, w >> 8 | x << 24);\r\n          w = load<u32>(src + 7);\r\n          store<u32>(dest + 4, x >> 8 | w << 24);\r\n          x = load<u32>(src + 11);\r\n          store<u32>(dest + 8, w >> 8 | x << 24);\r\n          w = load<u32>(src + 15);\r\n          store<u32>(dest + 12, x >> 8 | w << 24);\r\n          src += 16; dest += 16; n -= 16;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // copy remaining bytes one by one\r\n  if (n & 16) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n  }\r\n  if (n & 8) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n  }\r\n  if (n & 4) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n  }\r\n  if (n & 2) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n    store<u8>(dest++, load<u8>(src++));\r\n  }\r\n  if (n & 1) {\r\n    store<u8>(dest++, load<u8>(src++));\r\n  }\r\n}\r\n\r\n// this function will go away once `memory.copy` becomes an intrinsic\r\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\r\n  if (dest === src) return;\r\n  if (src + n <= dest || dest + n <= src) {\r\n    memcpy(dest, src, n);\r\n    return;\r\n  }\r\n  if (dest < src) {\r\n    if ((src & 7) == (dest & 7)) {\r\n      while (dest & 7) {\r\n        if (!n) return;\r\n        --n;\r\n        store<u8>(dest++, load<u8>(src++));\r\n      }\r\n      while (n >= 8) {\r\n        store<u64>(dest, load<u64>(src));\r\n        n    -= 8;\r\n        dest += 8;\r\n        src  += 8;\r\n      }\r\n    }\r\n    while (n) {\r\n      store<u8>(dest++, load<u8>(src++));\r\n      --n;\r\n    }\r\n  } else {\r\n    if ((src & 7) == (dest & 7)) {\r\n      while ((dest + n) & 7) {\r\n        if (!n) return;\r\n        store<u8>(dest + --n, load<u8>(src + n));\r\n      }\r\n      while (n >= 8) {\r\n        n -= 8;\r\n        store<u64>(dest + n, load<u64>(src + n));\r\n      }\r\n    }\r\n    while (n) {\r\n      store<u8>(dest + --n, load<u8>(src + n));\r\n    }\r\n  }\r\n}\r\n\r\n// this function will go away once `memory.fill` becomes an intrinsic\r\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\r\n\r\n  // fill head and tail with minimal branching\r\n  if (!n) return;\r\n  store<u8>(dest, c);\r\n  store<u8>(dest + n - 1, c);\r\n  if (n <= 2) return;\r\n\r\n  store<u8>(dest + 1, c);\r\n  store<u8>(dest + 2, c);\r\n  store<u8>(dest + n - 2, c);\r\n  store<u8>(dest + n - 3, c);\r\n  if (n <= 6) return;\r\n  store<u8>(dest + 3, c);\r\n  store<u8>(dest + n - 4, c);\r\n  if (n <= 8) return;\r\n\r\n  // advance pointer to align it at 4-byte boundary\r\n  var k: usize = -dest & 3;\r\n  dest += k;\r\n  n -= k;\r\n  n &= -4;\r\n\r\n  var c32: u32 = <u32>-1 / 255 * c;\r\n\r\n  // fill head/tail up to 28 bytes each in preparation\r\n  store<u32>(dest, c32);\r\n  store<u32>(dest + n - 4, c32);\r\n  if (n <= 8) return;\r\n  store<u32>(dest + 4, c32);\r\n  store<u32>(dest + 8, c32);\r\n  store<u32>(dest + n - 12, c32);\r\n  store<u32>(dest + n - 8, c32);\r\n  if (n <= 24) return;\r\n  store<u32>(dest + 12, c32);\r\n  store<u32>(dest + 16, c32);\r\n  store<u32>(dest + 20, c32);\r\n  store<u32>(dest + 24, c32);\r\n  store<u32>(dest + n - 28, c32);\r\n  store<u32>(dest + n - 24, c32);\r\n  store<u32>(dest + n - 20, c32);\r\n  store<u32>(dest + n - 16, c32);\r\n\r\n  // align to a multiple of 8\r\n  k = 24 + (dest & 4);\r\n  dest += k;\r\n  n -= k;\r\n\r\n  // copy 32 bytes each\r\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\r\n  while (n >= 32) {\r\n    store<u64>(dest, c64);\r\n    store<u64>(dest + 8, c64);\r\n    store<u64>(dest + 16, c64);\r\n    store<u64>(dest + 24, c64);\r\n    n -= 32;\r\n    dest += 32;\r\n  }\r\n}\r\n\r\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\r\n  if (vl == vr) return 0;\r\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\r\n    n--; vl++; vr++;\r\n  }\r\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\r\n}\r\n","import {\r\n  HEADER_SIZE as HEADER_SIZE_AB\r\n} from \"./internal/arraybuffer\";\r\n\r\nimport {\r\n  HASH\r\n} from \"./internal/hash\";\r\n\r\n// A deterministic hash map based on CloseTable from https://github.com/jorendorff/dht\r\n\r\nconst INITIAL_CAPACITY = 4;\r\nconst FILL_FACTOR: f64 = 8 / 3;\r\nconst FREE_FACTOR: f64 = 3 / 4;\r\n\r\n/** Structure of a map entry. */\r\n@unmanaged class MapEntry<K,V> {\r\n  key: K;\r\n  value: V;\r\n  taggedNext: usize; // LSB=1 indicates EMPTY\r\n}\r\n\r\n/** Empty bit. */\r\nconst EMPTY: usize = 1 << 0;\r\n\r\n/** Size of a bucket. */\r\nconst BUCKET_SIZE = sizeof<usize>();\r\n\r\n/** Computes the alignment of an entry. */\r\n@inline function ENTRY_ALIGN<K,V>(): usize {\r\n  // can align to 4 instead of 8 if 32-bit and K/V is <= 32-bits\r\n  const maxkv = sizeof<K>() > sizeof<V>() ? sizeof<K>() : sizeof<V>();\r\n  const align = (maxkv > sizeof<usize>() ? maxkv : sizeof<usize>()) - 1;\r\n  return align;\r\n}\r\n\r\n/** Computes the aligned size of an entry. */\r\n@inline function ENTRY_SIZE<K,V>(): usize {\r\n  const align = ENTRY_ALIGN<K,V>();\r\n  const size = (offsetof<MapEntry<K,V>>() + align) & ~align;\r\n  return size;\r\n}\r\n\r\nexport class Map<K,V> {\r\n\r\n  // buckets holding references to the respective first entry within\r\n  private buckets: ArrayBuffer; // usize[bucketsMask + 1]\r\n  private bucketsMask: u32;\r\n\r\n  // entries in insertion order\r\n  private entries: ArrayBuffer; // MapEntry<K,V>[entriesCapacity]\r\n  private entriesCapacity: i32;\r\n  private entriesOffset: i32;\r\n  private entriesCount: i32;\r\n\r\n  get size(): i32 { return this.entriesCount; }\r\n\r\n  constructor() { this.clear(); }\r\n\r\n  clear(): void {\r\n    const bucketsSize = INITIAL_CAPACITY * <i32>BUCKET_SIZE;\r\n    this.buckets = new ArrayBuffer(bucketsSize);\r\n    this.bucketsMask = INITIAL_CAPACITY - 1;\r\n    const entriesSize = INITIAL_CAPACITY * <i32>ENTRY_SIZE<K,V>();\r\n    this.entries = new ArrayBuffer(entriesSize, true);\r\n    this.entriesCapacity = INITIAL_CAPACITY;\r\n    this.entriesOffset = 0;\r\n    this.entriesCount = 0;\r\n  }\r\n\r\n  private find(key: K, hashCode: u32): MapEntry<K,V> | null {\r\n    var entry = load<MapEntry<K,V>>(\r\n      changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE,\r\n      HEADER_SIZE_AB\r\n    );\r\n    while (entry) {\r\n      if (!(entry.taggedNext & EMPTY) && entry.key == key) return entry;\r\n      entry = changetype<MapEntry<K,V>>(entry.taggedNext & ~EMPTY);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  has(key: K): bool {\r\n    return this.find(key, HASH<K>(key)) !== null;\r\n  }\r\n\r\n  get(key: K): V {\r\n    var entry = this.find(key, HASH<K>(key));\r\n    return entry ? entry.value : <V>unreachable();\r\n  }\r\n\r\n  set(key: K, value: V): void {\r\n    var hashCode = HASH<K>(key);\r\n    var entry = this.find(key, hashCode);\r\n    if (entry) {\r\n      entry.value = value;\r\n    } else {\r\n      // check if rehashing is necessary\r\n      if (this.entriesOffset == this.entriesCapacity) {\r\n        this.rehash(\r\n          this.entriesCount < <i32>(this.entriesCapacity * FREE_FACTOR)\r\n            ?  this.bucketsMask           // just rehash if 1/4+ entries are empty\r\n            : (this.bucketsMask << 1) | 1 // grow capacity to next 2^N\r\n        );\r\n      }\r\n      // append new entry\r\n      let entries = this.entries;\r\n      entry = changetype<MapEntry<K,V>>(\r\n        changetype<usize>(entries) + HEADER_SIZE_AB + this.entriesOffset++ * ENTRY_SIZE<K,V>()\r\n      );\r\n      entry.key = key;\r\n      entry.value = value;\r\n      ++this.entriesCount;\r\n      // link with previous entry in bucket\r\n      let bucketPtrBase = changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE;\r\n      entry.taggedNext = load<usize>(bucketPtrBase, HEADER_SIZE_AB);\r\n      store<usize>(bucketPtrBase, changetype<usize>(entry), HEADER_SIZE_AB);\r\n      if (isManaged<K>()) __gc_link(changetype<usize>(this), changetype<usize>(key)); // tslint:disable-line\r\n      if (isManaged<V>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\r\n    }\r\n  }\r\n\r\n  delete(key: K): bool {\r\n    var entry = this.find(key, HASH<K>(key));\r\n    if (!entry) return false;\r\n    entry.taggedNext |= EMPTY;\r\n    --this.entriesCount;\r\n    // check if rehashing is appropriate\r\n    var halfBucketsMask = this.bucketsMask >> 1;\r\n    if (\r\n      halfBucketsMask + 1 >= max<u32>(INITIAL_CAPACITY, this.entriesCount) &&\r\n      this.entriesCount < <i32>(this.entriesCapacity * FREE_FACTOR)\r\n    ) this.rehash(halfBucketsMask);\r\n    return true;\r\n  }\r\n\r\n  private rehash(newBucketsMask: u32): void {\r\n    var newBucketsCapacity = <i32>(newBucketsMask + 1);\r\n    var newBuckets = new ArrayBuffer(newBucketsCapacity * <i32>BUCKET_SIZE);\r\n    var newEntriesCapacity = <i32>(newBucketsCapacity * FILL_FACTOR);\r\n    var newEntries = new ArrayBuffer(newEntriesCapacity * <i32>ENTRY_SIZE<K,V>(), true);\r\n\r\n    // copy old entries to new entries\r\n    var oldPtr = changetype<usize>(this.entries) + HEADER_SIZE_AB;\r\n    var oldEnd = oldPtr + <usize>this.entriesOffset * ENTRY_SIZE<K,V>();\r\n    var newPtr = changetype<usize>(newEntries) + HEADER_SIZE_AB;\r\n    while (oldPtr != oldEnd) {\r\n      let oldEntry = changetype<MapEntry<K,V>>(oldPtr);\r\n      if (!(oldEntry.taggedNext & EMPTY)) {\r\n        let newEntry = changetype<MapEntry<K,V>>(newPtr);\r\n        newEntry.key = oldEntry.key;\r\n        newEntry.value = oldEntry.value;\r\n        let newBucketIndex = HASH<K>(oldEntry.key) & newBucketsMask;\r\n        let newBucketPtrBase = changetype<usize>(newBuckets) + <usize>newBucketIndex * BUCKET_SIZE;\r\n        newEntry.taggedNext = load<usize>(newBucketPtrBase, HEADER_SIZE_AB);\r\n        store<usize>(newBucketPtrBase, newPtr, HEADER_SIZE_AB);\r\n        newPtr += ENTRY_SIZE<K,V>();\r\n      }\r\n      oldPtr += ENTRY_SIZE<K,V>();\r\n    }\r\n\r\n    this.buckets = newBuckets;\r\n    this.bucketsMask = newBucketsMask;\r\n    this.entries = newEntries;\r\n    this.entriesCapacity = newEntriesCapacity;\r\n    this.entriesOffset = this.entriesCount;\r\n  }\r\n\r\n  toString(): string {\r\n    return \"[object Map]\";\r\n  }\r\n\r\n  private __gc(): void {\r\n    __gc_mark(changetype<usize>(this.buckets)); // tslint:disable-line\r\n    var entries = this.entries;\r\n    __gc_mark(changetype<usize>(entries)); // tslint:disable-line\r\n    if (isManaged<K>() || isManaged<V>()) {\r\n      let offset: usize = 0;\r\n      let end: usize = this.entriesOffset * ENTRY_SIZE<K,V>();\r\n      while (offset < end) {\r\n        let entry = changetype<MapEntry<K,V>>(\r\n          changetype<usize>(entries) + HEADER_SIZE_AB + offset * ENTRY_SIZE<K,V>()\r\n        );\r\n        if (!(entry.taggedNext & EMPTY)) {\r\n          if (isManaged<K>()) __gc_mark(changetype<usize>(entry.key)); // tslint:disable-line\r\n          if (isManaged<V>()) __gc_mark(changetype<usize>(entry.value)); // tslint:disable-line\r\n        }\r\n        offset += ENTRY_SIZE<K,V>();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  HEADER_SIZE,\r\n  MAX_BLENGTH,\r\n  allocateUnsafe\r\n} from \"./internal/arraybuffer\";\r\n\r\nimport {\r\n  Uint8ClampedArray,\r\n  Uint8Array,\r\n  Int8Array,\r\n  Uint16Array,\r\n  Int16Array,\r\n  Uint32Array,\r\n  Int32Array,\r\n  Uint64Array,\r\n  Int64Array\r\n} from \"./typedarray\";\r\n\r\nimport {\r\n  DataView\r\n} from \"./dataview\";\r\n\r\n@sealed\r\nexport class ArrayBuffer {\r\n\r\n  readonly byteLength: i32; // capped to [0, MAX_LENGTH]\r\n\r\n  @inline static isView<T>(value: T): bool {\r\n    if (value === null) return false;\r\n    if (value instanceof Uint8ClampedArray) return true;\r\n    if (value instanceof Uint8Array) return true;\r\n    if (value instanceof Int8Array) return true;\r\n    if (value instanceof Uint16Array) return true;\r\n    if (value instanceof Int16Array) return true;\r\n    if (value instanceof Uint32Array) return true;\r\n    if (value instanceof Int32Array) return true;\r\n    if (value instanceof Uint64Array) return true;\r\n    if (value instanceof Int64Array) return true;\r\n    if (value instanceof DataView) return true;\r\n    return false;\r\n  }\r\n\r\n  // @unsafe\r\n  @inline get data(): usize { return changetype<usize>(this) + HEADER_SIZE; }\r\n\r\n  constructor(length: i32, unsafe: bool = false) {\r\n    if (<u32>length > <u32>MAX_BLENGTH) throw new RangeError(\"Invalid array buffer length\");\r\n    var buffer = allocateUnsafe(length);\r\n    if (!unsafe) memory.fill(changetype<usize>(buffer) + HEADER_SIZE, 0, <usize>length);\r\n    return buffer;\r\n  }\r\n\r\n  slice(begin: i32 = 0, end: i32 = MAX_BLENGTH): ArrayBuffer {\r\n    var len = this.byteLength;\r\n    if (begin < 0) begin = max(len + begin, 0);\r\n    else begin = min(begin, len);\r\n    if (end < 0) end = max(len + end, 0);\r\n    else end = min(end, len);\r\n    var newLen = max(end - begin, 0);\r\n    var buffer = allocateUnsafe(newLen);\r\n    memory.copy(changetype<usize>(buffer) + HEADER_SIZE, changetype<usize>(this) + HEADER_SIZE + begin, newLen);\r\n    return buffer;\r\n  }\r\n\r\n  toString(): string {\r\n    return \"[object ArrayBuffer]\";\r\n  }\r\n}\r\n","import { CanvasRenderingContext2D } from \"../renderer/CanvasRenderingContext2D\";\r\n\r\nlet map = new Map<string, CanvasRenderingContext2D>();\r\n\r\n/**\r\n * This internal function is exported via the `./assembly/glue.ts` file. It receives an id from the\r\n * host, and a name. It's responsible for creating a new CanvasRenderingContext2D object, then\r\n * stores it on the map object by it's name. This allows developers to call `getContextById(name)`\r\n * to obtain the created reference to the canvas context.\r\n *\r\n * @param {string} name - The name of the CanvasRenderingContext2D object\r\n * @param {i32} id - The unique objectid created by the browser that identifies the context.\r\n */\r\nexport function __use_context(name: string, id: i32): void {\r\n  var result = new CanvasRenderingContext2D();\r\n  store<i32>(changetype<usize>(result) + offsetof<CanvasRenderingContext2D>(\"id\"), id);\r\n  map.set(name, result);\r\n}\r\n\r\n/**\r\n * This function is the only way to obtain a named canvas provided by the JavaScript host.\r\n *\r\n * @param {string} name - This is the name of the provided context.\r\n */\r\nexport function getContextById(name: string): CanvasRenderingContext2D {\r\n  if (!map.has(name)) throw new Error(\"Cannot find context with name: \" + name);\r\n  return map.get(name);\r\n}\r\n","\r\nimport { STORE } from \"internal/arraybuffer\";\r\n\r\n/**\r\n * The Buffer class is an ArrayBuffer backed data writer that utilizes the internal STORE function\r\n * provided by AssemblyScript to write data as fast as possible to memory. The generic type\r\n * parameter represents an enum indicating the instruction type values coupled with the memory\r\n * writes. Each instruction write results in the following values written to the buffer:\r\n *\r\n * 1. [instruction] `T` - This value is the instruction type cast to a `f64`\r\n * 2. [nextIndex] `i32` - This value is the pointer to the next instruction index\r\n * 3. [...args] `f64[]` - These values are the argument values for the instruction\r\n */\r\nexport class Buffer<T extends i32> {\r\n  /**\r\n   * The buffer property is a reference to an allocated block of memory that contains all the\r\n   * currently written values to the buffer. The browser eventually should obtain a pointer to this\r\n   * block and read the values from it to perform actions.\r\n   */\r\n  protected _buffer: ArrayBuffer = new ArrayBuffer(0x10000 * sizeof<f64>(), true);\r\n\r\n  /**\r\n   * The offset property is a pointer to the next index that will receive a written value.\r\n   */\r\n  private _offset: i32 = 0;\r\n\r\n  /**\r\n   * Write a single instruction to the buffer without any parameters. This results in two values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeZero(inst: T): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 2;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with a single parameter. This results in three values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeOne(inst: T, a: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 3;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with two parameters. This results in four values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeTwo(inst: T, a: f64, b: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 4;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with three parameters. This results in five values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeThree(inst: T, a: f64, b: f64, c: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 5;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with four parameters. This results in six values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeFour(inst: T, a: f64, b: f64, c: f64, d: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 6;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    STORE<f64>(buff, index + 5, d);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with five parameters. This results in seven values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fifth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeFive(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 7;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    STORE<f64>(buff, index + 5, d);\r\n    STORE<f64>(buff, index + 6, e);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with six parameters. This results in eight values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeSix(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 8;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    STORE<f64>(buff, index + 5, d);\r\n    STORE<f64>(buff, index + 6, e);\r\n    STORE<f64>(buff, index + 7, f);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with eight parameters. This results in ten values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} g - The seventh parameter for the instruction to be written to the buffer.\r\n   * @param {f64} h - The eighth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeEight(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 10;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    STORE<f64>(buff, index + 5, d);\r\n    STORE<f64>(buff, index + 6, e);\r\n    STORE<f64>(buff, index + 7, f);\r\n    STORE<f64>(buff, index + 8, g);\r\n    STORE<f64>(buff, index + 9, h);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with nine parameters. This results in eleven values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} g - The seventh parameter for the instruction to be written to the buffer.\r\n   * @param {f64} h - The eighth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} i - The ninth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeNine(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64, i: f64): void {\r\n    var buff: ArrayBuffer = this._buffer;\r\n    var index: i32 = this._offset;\r\n    var next: i32 = index + 11;\r\n    STORE<f64>(buff, index, <f64>inst);\r\n    STORE<f64>(buff, index + 1, <f64>next);\r\n    STORE<f64>(buff, index + 2, a);\r\n    STORE<f64>(buff, index + 3, b);\r\n    STORE<f64>(buff, index + 4, c);\r\n    STORE<f64>(buff, index + 5, d);\r\n    STORE<f64>(buff, index + 6, e);\r\n    STORE<f64>(buff, index + 7, f);\r\n    STORE<f64>(buff, index + 8, g);\r\n    STORE<f64>(buff, index + 9, h);\r\n    STORE<f64>(buff, index + 10, i);\r\n    this._offset = next;\r\n  }\r\n\r\n  /**\r\n   * Reset the buffer back to position 0.\r\n   */\r\n  @inline\r\n  protected _resetBuffer(): void {\r\n    this._offset = 0;\r\n  }\r\n}\r\n","/**\r\n * The CanvasRenderingContext2D.direction value of the Canvas 2D API specifies the current text\r\n * direction used to draw text onto the canvas.\r\n */\r\nexport enum CanvasDirection {\r\n  /**\r\n   * The text direction is left-to-right.\r\n   */\r\n  ltr = 0,\r\n  /**\r\n   * The text direction is right-to-left.\r\n   */\r\n  rtl = 1,\r\n  /**\r\n   * The text direction is inherited from the <canvas> element or the Document as appropriate. Default value.\r\n   */\r\n  inherit = 2,\r\n}\r\n","/**\r\n * The GlobalCompositeOperation enum for the globalCompositeOperation property sets the type\r\n * of compositing operation to apply when drawing new shapes.\r\n */\r\nexport enum GlobalCompositeOperation {\r\n  /**\r\n   * This is the default setting and draws new shapes on top of the existing canvas content\r\n   */\r\n  source_over = 0,\r\n  /**\r\n   * The new shape is drawn only where both the new shape and the destination canvas overlap.\r\n   * Everything else is made transparent.\r\n   */\r\n  source_in = 1,\r\n  /**\r\n   * The new shape is drawn where it doesn't overlap the existing canvas content.\r\n   */\r\n  source_out = 2,\r\n  /**\r\n   * The new shape is only drawn where it overlaps the existing canvas content.\r\n   */\r\n  source_atop = 3,\r\n  /**\r\n   * New shapes are drawn behind the existing canvas content.\r\n   */\r\n  destination_over = 4,\r\n  /**\r\n   * The existing canvas content is kept where both the new shape and existing canvas content\r\n   * overlap. Everything else is made transparent.\r\n   */\r\n  destination_in = 5,\r\n  /**\r\n   * The existing content is kept where it doesn't overlap the new shape.\r\n   */\r\n  destination_out = 6,\r\n  /**\r\n   * The existing canvas is only kept where it overlaps the new shape. The new shape is drawn\r\n   * behind the canvas content.\r\n   */\r\n  destination_atop = 7,\r\n  /**\r\n   * Where both shapes overlap the color is determined by adding color values.\r\n   */\r\n  lighter = 8,\r\n  /**\r\n   * Only the new shape is shown.\r\n   */\r\n  copy = 9,\r\n  /**\r\n   * Shapes are made transparent where both overlap and drawn normal everywhere else.\r\n   */\r\n  xor = 10,\r\n  /**\r\n   * The pixels are of the top layer are multiplied with the corresponding pixel of the bottom\r\n   * layer. A darker picture is the result.\r\n   */\r\n  multiply = 11,\r\n  /**\r\n   * The pixels are inverted, multiplied, and inverted again. A lighter picture is the result\r\n   * (opposite of multiply)\r\n   */\r\n  screen = 12,\r\n  /**\r\n   * A combination of multiply and screen. Dark parts on the base layer become darker, and light\r\n   * parts become lighter.\r\n   */\r\n  overlay = 13,\r\n  /**\r\n   * Retains the darkest pixels of both layers.\r\n   */\r\n  darken = 14,\r\n  /**\r\n   * Retains the lightest pixels of both layers.\r\n   */\r\n  lighten = 15,\r\n  /**\r\n   * Divides the bottom layer by the inverted top layer.\r\n   */\r\n  color_dodge = 16,\r\n  /**\r\n   * Divides the inverted bottom layer by the top layer, and then inverts the result.\r\n   */\r\n  color_burn = 17,\r\n  /**\r\n   * A combination of multiply and screen like overlay, but with top and bottom layer swapped.\r\n   */\r\n  hard_light = 18,\r\n  /**\r\n   * A softer version of hard-light. Pure black or white does not result in pure black or white.\r\n   */\r\n  soft_light = 19,\r\n  /**\r\n   * Subtracts the bottom layer from the top layer or the other way round to always get a positive\r\n   * value.\r\n   */\r\n  difference = 20,\r\n  /**\r\n   * Like difference, but with lower contrast.\r\n   */\r\n  exclusion = 21,\r\n  /**\r\n   * Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.\r\n   */\r\n  hue = 22,\r\n  /**\r\n   * Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.\r\n   */\r\n  saturation = 23,\r\n  /**\r\n   * Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.\r\n   */\r\n  color = 24,\r\n  /**\r\n   * Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.\r\n   */\r\n  luminosity = 25,\r\n}\r\n","export enum ImageSmoothingQuality {\r\n  low = 0,\r\n  medium = 1,\r\n  high = 2,\r\n}","export enum LineCap {\r\n  butt = 0,\r\n  round = 1,\r\n  square = 2,\r\n}\r\n","/**\r\n * The LineJoin enum responsible for setting the lineJoin property of the Canvas 2D API determines\r\n * the shape used to join two line segments where they meet.\r\n *\r\n * This property has no effect wherever two connected segments have the same direction, because no\r\n * joining area will be added in this case. Degenerate segments with a length of zero (i.e., with\r\n * all endpoints and control points at the exact same position) are also ignored.\r\n */\r\nexport enum LineJoin {\r\n  /**\r\n   * Rounds off the corners of a shape by filling an additional sector of disc centered at the\r\n   * common endpoint of connected segments. The radius for these rounded corners is equal to the\r\n   * line width.\r\n   */\r\n  bevel = 0,\r\n  /**\r\n   * Fills an additional triangular area between the common endpoint of connected segments, and the\r\n   * separate outside rectangular corners of each segment.\r\n   */\r\n  round = 1,\r\n  /**\r\n   * Connected segments are joined by extending their outside edges to connect at a single point,\r\n   * with the effect of filling an additional lozenge-shaped area. This setting is affected by the\r\n   * miterLimit property. Default value.\r\n   */\r\n  miter = 2,\r\n}","/**\r\n * The TextAlign enum specifies the current text alignment used when drawing text.\r\n *\r\n * The alignment is relative to the x value of the fillText() method. For example, if textAlign is\r\n * \"center\", then the text's left edge will be at x - (textWidth / 2).\r\n */\r\nexport enum TextAlign {\r\n  /**\r\n   * The text is left-aligned.\r\n   **/\r\n  left = 0,\r\n  /**\r\n   * The text is right-aligned.\r\n   **/\r\n  right = 1,\r\n  /**\r\n   * The text is centered.\r\n   **/\r\n  center = 2,\r\n  /**\r\n   * The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales).\r\n   **/\r\n  start = 3,\r\n  /**\r\n   * The text is aligned at the normal end of the line (right-aligned for left-to-right locales, left-aligned for right-to-left locales).\r\n   **/\r\n  end = 4,\r\n}\r\n","/**\r\n * The TextBasline enum specifies the current text baseline used when drawing text.\r\n */\r\nexport enum TextBaseline {\r\n  /**\r\n   * The text baseline is the top of the em square.\r\n   **/\r\n  top = 0,\r\n  /**\r\n   * The text baseline is the hanging baseline. (Used by Tibetan and other Indic scripts.)\r\n   **/\r\n  hanging = 1,\r\n  /**\r\n   * The text baseline is the middle of the em square.\r\n   **/\r\n  middle = 2,\r\n  /**\r\n   * The text baseline is the normal alphabetic baseline. Default value.\r\n   **/\r\n  alphabetic = 3,\r\n  /**\r\n   * The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline. (Used by Chinese, Japanese, and Korean scripts.)\r\n   **/\r\n  ideographic = 4,\r\n  /**\r\n   * The text baseline is the bottom of the bounding box. This differs from the ideographic baseline in that the ideographic baseline doesn't consider descenders.\r\n   **/\r\n  bottom = 5,\r\n}","import {\r\n  MAX_BLENGTH,\r\n  HEADER_SIZE,\r\n  allocateUnsafe,\r\n  reallocateUnsafe,\r\n  LOAD,\r\n  STORE\r\n} from \"./internal/arraybuffer\";\r\n\r\nimport {\r\n  allocateUnsafe as allocateUnsafeString,\r\n  freeUnsafe as freeUnsafeString,\r\n  copyUnsafe as copyUnsafeString\r\n} from \"./internal/string\";\r\n\r\nimport {\r\n  COMPARATOR,\r\n  SORT\r\n} from \"./internal/sort\";\r\n\r\nimport {\r\n  itoa,\r\n  dtoa,\r\n  itoa_stream,\r\n  dtoa_stream,\r\n  MAX_DOUBLE_LENGTH\r\n} from \"./internal/number\";\r\n\r\nimport {\r\n  isArray as builtin_isArray\r\n} from \"./builtins\";\r\n\r\nexport class Array<T> {\r\n  [key: number]: T; // compatibility only\r\n\r\n  /* @internal */ buffer_: ArrayBuffer;\r\n  /* @internal */ length_: i32;\r\n\r\n  @inline static isArray<U>(value: U): bool {\r\n    return builtin_isArray(value) && value !== null;\r\n  }\r\n\r\n  constructor(length: i32 = 0) {\r\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\r\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\r\n    var byteLength = length << alignof<T>();\r\n    var buffer = allocateUnsafe(byteLength);\r\n    this.buffer_ = buffer;\r\n    this.length_ = length;\r\n    memory.fill(\r\n      changetype<usize>(buffer) + HEADER_SIZE,\r\n      0,\r\n      <usize>byteLength\r\n    );\r\n  }\r\n\r\n  @inline\r\n  get length(): i32 {\r\n    return this.length_;\r\n  }\r\n\r\n  set length(length: i32) {\r\n    var buffer = this.buffer_;\r\n    var capacity = buffer.byteLength >>> alignof<T>();\r\n    if (<u32>length > <u32>capacity) {\r\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\r\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\r\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\r\n      this.buffer_ = buffer;\r\n    }\r\n    this.length_ = length;\r\n  }\r\n\r\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      if (!callbackfn(LOAD<T>(this.buffer_, index), index, this)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      if (predicate(LOAD<T>(this.buffer_, index), index, this)) return index;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  @operator(\"[]\")\r\n  private __get(index: i32): T {\r\n    var buffer = this.buffer_;\r\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\r\n      ? LOAD<T>(buffer, index)\r\n      : <T>unreachable();\r\n  }\r\n\r\n  @operator(\"{}\")\r\n  private __unchecked_get(index: i32): T {\r\n    return LOAD<T>(this.buffer_, index);\r\n  }\r\n\r\n  @operator(\"[]=\")\r\n  private __set(index: i32, value: T): void {\r\n    var buffer = this.buffer_;\r\n    var capacity = buffer.byteLength >>> alignof<T>();\r\n    if (<u32>index >= <u32>capacity) {\r\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\r\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\r\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\r\n      this.buffer_ = buffer;\r\n      this.length_ = index + 1;\r\n    }\r\n    STORE<T>(buffer, index, value);\r\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\r\n  }\r\n\r\n  @operator(\"{}=\")\r\n  private __unchecked_set(index: i32, value: T): void {\r\n    STORE<T>(this.buffer_, index, value);\r\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\r\n  }\r\n\r\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\r\n    var buffer = this.buffer_;\r\n    var len    = this.length_;\r\n\r\n    start = start < 0 ? max(len + start, 0) : min(start, len);\r\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\r\n\r\n    if (sizeof<T>() == 1) {\r\n      if (start < end) {\r\n        memory.fill(\r\n          changetype<usize>(buffer) + start + HEADER_SIZE,\r\n          <u8>value,\r\n          <usize>(end - start)\r\n        );\r\n      }\r\n    } else {\r\n      for (; start < end; ++start) {\r\n        STORE<T>(buffer, start, value);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  @inline\r\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\r\n    return this.indexOf(searchElement, fromIndex) >= 0;\r\n  }\r\n\r\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\r\n    var length = this.length_;\r\n    if (length == 0 || fromIndex >= length) return -1;\r\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\r\n    var buffer = this.buffer_;\r\n    while (fromIndex < length) {\r\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\r\n      ++fromIndex;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\r\n    var length = this.length_;\r\n    if (length == 0) return -1;\r\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\r\n    else if (fromIndex >= length) fromIndex = length - 1;\r\n    var buffer = this.buffer_;\r\n    while (fromIndex >= 0) {                           // ^\r\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\r\n      --fromIndex;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  push(element: T): i32 {\r\n    var length = this.length_;\r\n    var buffer = this.buffer_;\r\n    var capacity = buffer.byteLength >>> alignof<T>();\r\n    var newLength = length + 1; // safe only if length is checked\r\n    if (<u32>length >= <u32>capacity) {\r\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\r\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\r\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\r\n      this.buffer_ = buffer;\r\n    }\r\n    this.length_ = newLength;\r\n    STORE<T>(buffer, length, element);\r\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\r\n    return newLength;\r\n  }\r\n\r\n  concat(items: Array<T>): Array<T> {\r\n    var thisLen = this.length_;\r\n    var otherLen = select(0, items.length_, items === null);\r\n    var outLen = thisLen + otherLen;\r\n    var out = new Array<T>(outLen);\r\n\r\n    if (thisLen) {\r\n      memory.copy(\r\n        changetype<usize>(out.buffer_)  + HEADER_SIZE,\r\n        changetype<usize>(this.buffer_) + HEADER_SIZE,\r\n        <usize>thisLen << alignof<T>()\r\n      );\r\n    }\r\n    if (otherLen) {\r\n      memory.copy(\r\n        changetype<usize>(out.buffer_)   + HEADER_SIZE + (<usize>thisLen << alignof<T>()),\r\n        changetype<usize>(items.buffer_) + HEADER_SIZE,\r\n        <usize>otherLen << alignof<T>()\r\n      );\r\n    }\r\n    return out;\r\n  }\r\n\r\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\r\n    var buffer = this.buffer_;\r\n    var len = this.length_;\r\n\r\n        end   = min<i32>(end, len);\r\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\r\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\r\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\r\n    var count = min(last - from, len - to);\r\n\r\n    if (from < to && to < (from + count)) {\r\n      from += count - 1;\r\n      to   += count - 1;\r\n      while (count) {\r\n        STORE<T>(buffer, to, LOAD<T>(buffer, from));\r\n        --from, --to, --count;\r\n      }\r\n    } else {\r\n      memory.copy(\r\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>to << alignof<T>()),\r\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>from << alignof<T>()),\r\n        <usize>count << alignof<T>()\r\n      );\r\n    }\r\n    return this;\r\n  }\r\n\r\n  pop(): T {\r\n    var length = this.length_;\r\n    if (length < 1) throw new RangeError(\"Array is empty\");\r\n    var element = LOAD<T>(this.buffer_, --length);\r\n    this.length_ = length;\r\n    return element;\r\n  }\r\n\r\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      callbackfn(LOAD<T>(this.buffer_, index), index, this);\r\n    }\r\n  }\r\n\r\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\r\n    var length = this.length_;\r\n    var result = new Array<U>(length);\r\n    var buffer = result.buffer_;\r\n    for (let index = 0; index < min(length, this.length_); ++index) {\r\n      STORE<U>(buffer, index, callbackfn(LOAD<T>(this.buffer_, index), index, this));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\r\n    var result = new Array<T>();\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      let value = LOAD<T>(this.buffer_, index);\r\n      if (callbackfn(value, index, this)) result.push(value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  reduce<U>(\r\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\r\n    initialValue: U\r\n  ): U {\r\n    var accum = initialValue;\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\r\n    }\r\n    return accum;\r\n  }\r\n\r\n  reduceRight<U>(\r\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\r\n    initialValue: U\r\n  ): U {\r\n    var accum = initialValue;\r\n    for (let index = this.length_ - 1; index >= 0; --index) {\r\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\r\n    }\r\n    return accum;\r\n  }\r\n\r\n  shift(): T {\r\n    var length = this.length_;\r\n    if (length < 1) throw new RangeError(\"Array is empty\");\r\n    var buffer = this.buffer_;\r\n    var element = LOAD<T>(buffer, 0);\r\n    var lastIndex = length - 1;\r\n    memory.copy(\r\n      changetype<usize>(buffer) + HEADER_SIZE,\r\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\r\n      <usize>lastIndex << alignof<T>()\r\n    );\r\n    STORE<T>(buffer, lastIndex, <T>null);\r\n    this.length_ = lastIndex;\r\n    return element;\r\n  }\r\n\r\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\r\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\r\n      if (callbackfn(LOAD<T>(this.buffer_, index), index, this)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  unshift(element: T): i32 {\r\n    var buffer = this.buffer_;\r\n    var capacity = buffer.byteLength >>> alignof<T>();\r\n    var length = this.length_;\r\n    var newLength = length + 1; // safe only if length is checked\r\n    if (<u32>length >= <u32>capacity) {\r\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\r\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\r\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\r\n      capacity = buffer.byteLength >>> alignof<T>();\r\n      this.buffer_ = buffer;\r\n    }\r\n    memory.copy(\r\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\r\n      changetype<usize>(buffer) + HEADER_SIZE,\r\n      <usize>(capacity - 1) << alignof<T>()\r\n    );\r\n    STORE<T>(buffer, 0, element);\r\n    this.length_ = newLength;\r\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\r\n    return newLength;\r\n  }\r\n\r\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\r\n    var len = this.length_;\r\n    begin = begin < 0 ? max(begin + len, 0) : min(begin, len);\r\n    end = end < 0 ? max(end + len, 0) : min(end, len);\r\n    len = end - begin;\r\n    var sliced = new Array<T>(len);\r\n    if (len) {\r\n      memory.copy(\r\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\r\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\r\n        <usize>len << alignof<T>()\r\n      );\r\n    }\r\n    return sliced;\r\n  }\r\n\r\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\r\n    var length  = this.length_;\r\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\r\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\r\n    var buffer  = this.buffer_;\r\n    var spliced = new Array<T>(deleteCount);\r\n    var source  = changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>());\r\n    memory.copy(\r\n      changetype<usize>(spliced.buffer_) + HEADER_SIZE,\r\n      source,\r\n      <usize>deleteCount << alignof<T>()\r\n    );\r\n    var offset = start + deleteCount;\r\n    if (length != offset) {\r\n      memory.copy(\r\n        source,\r\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>offset << alignof<T>()),\r\n        <usize>(length - offset) << alignof<T>()\r\n      );\r\n    }\r\n    this.length_ = length - deleteCount;\r\n    return spliced;\r\n  }\r\n\r\n  reverse(): Array<T> {\r\n    var buffer = this.buffer_;\r\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\r\n      let temp = LOAD<T>(buffer, front);\r\n      STORE<T>(buffer, front, LOAD<T>(buffer, back));\r\n      STORE<T>(buffer, back, temp);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\r\n    // TODO remove this when flow will allow trackcing null\r\n    assert(comparator); // The comparison function must be a function\r\n\r\n    var length = this.length_;\r\n    if (length <= 1) return this;\r\n    var buffer = this.buffer_;\r\n    if (length == 2) {\r\n      let a = LOAD<T>(buffer, 1); // a = arr[1]\r\n      let b = LOAD<T>(buffer, 0); // b = arr[0]\r\n      if (comparator(a, b) < 0) {\r\n        STORE<T>(buffer, 1, b);   // arr[1] = b;\r\n        STORE<T>(buffer, 0, a);   // arr[0] = a;\r\n      }\r\n      return this;\r\n    }\r\n    SORT<T>(buffer, 0, length, comparator);\r\n    return this;\r\n  }\r\n\r\n  join(separator: string = \",\"): string {\r\n    var lastIndex = this.length_ - 1;\r\n    if (lastIndex < 0) return \"\";\r\n    var result = \"\";\r\n    var value: T;\r\n    var buffer = this.buffer_;\r\n    var sepLen = separator.length;\r\n    var hasSeparator = sepLen != 0;\r\n    if (value instanceof bool) {\r\n      if (!lastIndex) return select<string>(\"true\", \"false\", LOAD<T,bool>(buffer, 0));\r\n\r\n      let valueLen = 5; // max possible length of element len(\"false\")\r\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\r\n      let result = allocateUnsafeString(estLen);\r\n      let offset = 0;\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<T,bool>(buffer, i);\r\n        valueLen = 4 + <i32>(!value);\r\n        copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\r\n        offset += valueLen;\r\n        if (hasSeparator) {\r\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\r\n          offset += sepLen;\r\n        }\r\n      }\r\n      value = LOAD<T,bool>(buffer, lastIndex);\r\n      valueLen = 4 + <i32>(!value);\r\n      copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\r\n      offset += valueLen;\r\n\r\n      let out = result;\r\n      if (estLen > offset) {\r\n        out = result.substring(0, offset);\r\n        freeUnsafeString(result);\r\n      }\r\n      return out;\r\n    } else if (isInteger<T>()) {\r\n      if (!lastIndex) return changetype<string>(itoa<T>(LOAD<T>(buffer, 0)));\r\n\r\n      const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + <i32>isSigned<T>();\r\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\r\n      let result = allocateUnsafeString(estLen);\r\n      let offset = 0;\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<T>(buffer, i);\r\n        offset += itoa_stream<T>(changetype<usize>(result), offset, value);\r\n        if (hasSeparator) {\r\n          copyUnsafeString(result, offset, separator, 0, sepLen);\r\n          offset += sepLen;\r\n        }\r\n      }\r\n      value = LOAD<T>(buffer, lastIndex);\r\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\r\n      let out = result;\r\n      if (estLen > offset) {\r\n        out = result.substring(0, offset);\r\n        freeUnsafeString(result);\r\n      }\r\n      return out;\r\n    } else if (isFloat<T>()) {\r\n      if (!lastIndex) return changetype<string>(dtoa(LOAD<T,f64>(buffer, 0)));\r\n\r\n      const valueLen = MAX_DOUBLE_LENGTH;\r\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\r\n      let result = allocateUnsafeString(estLen);\r\n      let offset = 0;\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<T,f64>(buffer, i);\r\n        offset += dtoa_stream(changetype<usize>(result), offset, value);\r\n        if (hasSeparator) {\r\n          copyUnsafeString(result, offset, separator, 0, sepLen);\r\n          offset += sepLen;\r\n        }\r\n      }\r\n      value = LOAD<T,f64>(buffer, lastIndex);\r\n      offset += dtoa_stream(changetype<usize>(result), offset, value);\r\n      let out = result;\r\n      if (estLen > offset) {\r\n        out = result.substring(0, offset);\r\n        freeUnsafeString(result);\r\n      }\r\n      return out;\r\n    } else if (isString<T>()) {\r\n      if (!lastIndex) return LOAD<string>(buffer, 0);\r\n\r\n      let estLen = 0;\r\n      for (let i = 0, len = lastIndex + 1; i < len; ++i) {\r\n        estLen += LOAD<string>(buffer, i).length;\r\n      }\r\n      let offset = 0;\r\n      let result = allocateUnsafeString(estLen + sepLen * lastIndex);\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<string>(buffer, i);\r\n        if (value) {\r\n          let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\r\n          copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\r\n          offset += valueLen;                                   // tslint:disable-line:no-unsafe-any\r\n        }\r\n        if (hasSeparator) {\r\n          copyUnsafeString(result, offset, separator, 0, sepLen);\r\n          offset += sepLen;\r\n        }\r\n      }\r\n      value = LOAD<string>(buffer, lastIndex);\r\n      if (value) {\r\n        let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\r\n        copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\r\n      }\r\n      return result;\r\n    } else if (isArray<T>()) {\r\n      if (!lastIndex) {\r\n        value = LOAD<T>(buffer, 0);\r\n        return value ? value.join(separator) : \"\"; // tslint:disable-line:no-unsafe-any\r\n      }\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<T>(buffer, i);\r\n        if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\r\n        if (hasSeparator) result += separator;\r\n      }\r\n      value = LOAD<T>(buffer, lastIndex);\r\n      if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\r\n      return result;\r\n    } else if (isReference<T>()) { // References\r\n      if (!lastIndex) return \"[object Object]\";\r\n      const valueLen = 15; // max possible length of element len(\"[object Object]\")\r\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\r\n      let result = allocateUnsafeString(estLen);\r\n      let offset = 0;\r\n      for (let i = 0; i < lastIndex; ++i) {\r\n        value = LOAD<T>(buffer, i);\r\n        if (value) {\r\n          copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\r\n          offset += valueLen;\r\n        }\r\n        if (hasSeparator) {\r\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\r\n          offset += sepLen;\r\n        }\r\n      }\r\n      if (LOAD<T>(buffer, lastIndex)) {\r\n        copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\r\n        offset += valueLen;\r\n      }\r\n      let out = result;\r\n      if (estLen > offset) {\r\n        out = result.substring(0, offset);\r\n        freeUnsafeString(result);\r\n      }\r\n      return out;\r\n    } else {\r\n      assert(false); // Unsupported generic typename\r\n    }\r\n  }\r\n\r\n  @inline\r\n  toString(): string {\r\n    return this.join();\r\n  }\r\n\r\n  private __gc(): void {\r\n    var buffer = this.buffer_;\r\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\r\n    if (isManaged<T>()) {\r\n      let offset: usize = 0;\r\n      let end = <usize>this.length_ << alignof<usize>();\r\n      while (offset < end) {\r\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\r\n        offset += sizeof<usize>();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { CanvasInstruction } from \"../../src/shared/CanvasInstruction\";\r\n\r\nexport class Path2DElement {\r\n  instruction: CanvasInstruction = CanvasInstruction.Commit;\r\n  transformA: f64 = 1.0;\r\n  transformB: f64 = 0.0;\r\n  transformC: f64 = 0.0;\r\n  transformD: f64 = 1.0;\r\n  transformE: f64 = 0.0;\r\n  transformF: f64 = 0.0;\r\n  count: i32 = 0;\r\n  updateTransform: bool = false;\r\n  a: f64 = 0;\r\n  b: f64 = 0;\r\n  c: f64 = 0;\r\n  d: f64 = 0;\r\n  e: f64 = 0;\r\n  f: f64 = 0;\r\n  g: f64 = 0;\r\n  h: f64 = 0;\r\n}","import {\r\n  HEADER_SIZE\r\n} from \"./string\";\r\n\r\n/** Computes the 32-bit hash of a value of any type. */\r\n@inline\r\nexport function HASH<T>(key: T): u32 {\r\n  // branch-level tree-shaking makes this a `(return (call ...))`\r\n  if (isString(key)) {\r\n    return hashStr(key);\r\n  } else if (isReference<T>()) {\r\n    if (sizeof<T>() == 4) return hash32(changetype<u32>(key));\r\n    if (sizeof<T>() == 8) return hash64(changetype<u64>(key));\r\n  } else if (isFloat<T>()) {\r\n    if (sizeof<T>() == 4) return hash32(reinterpret<u32>(key));\r\n    if (sizeof<T>() == 8) return hash64(reinterpret<u64>(key));\r\n  } else {\r\n    if (sizeof<T>() == 1) return hash8 (<u32>key);\r\n    if (sizeof<T>() == 2) return hash16(<u32>key);\r\n    if (sizeof<T>() == 4) return hash32(<u32>key);\r\n    if (sizeof<T>() == 8) return hash64(<u64>key);\r\n  }\r\n  unreachable();\r\n}\r\n\r\n// FNV-1a 32-bit as a starting point, see: http://isthe.com/chongo/tech/comp/fnv/\r\n\r\nconst FNV_OFFSET: u32 = 2166136261;\r\nconst FNV_PRIME: u32 = 16777619;\r\n\r\nfunction hash8(key: u32): u32 {\r\n  return (FNV_OFFSET ^ key) * FNV_PRIME;\r\n}\r\n\r\nfunction hash16(key: u32): u32 {\r\n  var v = FNV_OFFSET;\r\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ( key >>  8        )) * FNV_PRIME;\r\n  return v;\r\n}\r\n\r\nfunction hash32(key: u32): u32 {\r\n  var v = FNV_OFFSET;\r\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((key >>  8) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((key >> 16) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ( key >> 24        )) * FNV_PRIME;\r\n  return v;\r\n}\r\n\r\nfunction hash64(key: u64): u32 {\r\n  var l = <u32> key;\r\n  var h = <u32>(key >>> 32);\r\n  var v = FNV_OFFSET;\r\n  v = (v ^ ( l        & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((l >>  8) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((l >> 16) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ( l >> 24        )) * FNV_PRIME;\r\n  v = (v ^ ( h        & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((h >>  8) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ((h >> 16) & 0xff)) * FNV_PRIME;\r\n  v = (v ^ ( h >> 24        )) * FNV_PRIME;\r\n  return v;\r\n}\r\n\r\nfunction hashStr(key: string): u32 {\r\n  var v = FNV_OFFSET;\r\n  for (let i: usize = 0, k: usize = key.length << 1; i < k; ++i) {\r\n    v = (v ^ <u32>load<u8>(changetype<usize>(key) + i, HEADER_SIZE)) * FNV_PRIME;\r\n  }\r\n  return v;\r\n}\r\n","import { MAX_SIZE_32 } from \"./allocator\";\r\nimport { String } from \"../string\";\r\n\r\n/** Size of a String header. */\r\nexport const HEADER_SIZE = (offsetof<String>() + 1) & ~1; // 2 byte aligned\r\n/** Maximum length of a String. */\r\nexport const MAX_LENGTH = (<i32>MAX_SIZE_32 - HEADER_SIZE) >>> 1;\r\n\r\n// Low-level utility\r\n\r\nfunction __gc(ref: usize): void {}\r\n\r\nexport function allocateUnsafe(length: i32): String {\r\n  assert(length > 0 && length <= MAX_LENGTH);\r\n  var buffer: usize;\r\n  if (isManaged<String>()) {\r\n    buffer = __gc_allocate(HEADER_SIZE + (<usize>length << 1), __gc);  // tslint:disable-line\r\n  } else {\r\n    buffer = memory.allocate(HEADER_SIZE + (<usize>length << 1));\r\n  }\r\n  store<i32>(buffer, length);\r\n  return changetype<String>(buffer);\r\n}\r\n\r\n@inline\r\nexport function freeUnsafe(buffer: String): void {\r\n  if (!isManaged<String>()) {\r\n    assert(buffer);\r\n    memory.free(changetype<usize>(buffer));\r\n  }\r\n}\r\n\r\nexport function copyUnsafe(dest: String, destOffset: usize, src: String, srcOffset: usize, len: usize): void {\r\n  memory.copy(\r\n    changetype<usize>(dest) + (destOffset << 1) + HEADER_SIZE,\r\n    changetype<usize>(src)  + (srcOffset  << 1) + HEADER_SIZE,\r\n    len << 1\r\n  );\r\n}\r\n\r\nexport function compareUnsafe(str1: String, offset1: usize, str2: String, offset2: usize, len: usize): i32 {\r\n  var cmp: i32 = 0;\r\n  var ptr1 = changetype<usize>(str1) + (offset1 << 1);\r\n  var ptr2 = changetype<usize>(str2) + (offset2 << 1);\r\n  while (len && !(cmp = <i32>load<u16>(ptr1, HEADER_SIZE) - <i32>load<u16>(ptr2, HEADER_SIZE))) {\r\n    --len, ptr1 += 2, ptr2 += 2;\r\n  }\r\n  return cmp;\r\n}\r\n\r\nexport function repeatUnsafe(dest: String, destOffset: usize, src: String, count: i32): void {\r\n  var length = src.length;\r\n  if (ASC_SHRINK_LEVEL > 1) {\r\n    let strLen = length << 1;\r\n    let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\r\n    let from = changetype<usize>(src)  + HEADER_SIZE;\r\n    for (let i = 0, len = strLen * count; i < len; i += strLen) {\r\n      memory.copy(to + i, from, strLen);\r\n    }\r\n  } else {\r\n    switch (length) {\r\n      case 0: break;\r\n      case 1: {\r\n        let cc =  load<u16>(changetype<usize>(src), HEADER_SIZE);\r\n        let out = changetype<usize>(dest) + (destOffset << 1);\r\n        for (let i = 0; i < count; ++i) {\r\n          store<u16>(out + (i << 1), cc, HEADER_SIZE);\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        let cc  = load<u32>(changetype<usize>(src), HEADER_SIZE);\r\n        let out = changetype<usize>(dest) + (destOffset << 1);\r\n        for (let i = 0; i < count; ++i) {\r\n          store<u32>(out + (i << 2), cc, HEADER_SIZE);\r\n        }\r\n        break;\r\n      }\r\n      case 3: {\r\n        let cc1 = load<u32>(changetype<usize>(src), HEADER_SIZE + 0);\r\n        let cc2 = load<u16>(changetype<usize>(src), HEADER_SIZE + 4);\r\n        let out = changetype<usize>(dest) + (destOffset << 1);\r\n        for (let i = 0; i < count; ++i) {\r\n          store<u32>(out + (i << 2), cc1, HEADER_SIZE + 0);\r\n          store<u16>(out + (i << 1), cc2, HEADER_SIZE + 4);\r\n        }\r\n        break;\r\n      }\r\n      case 4: {\r\n        let cc = load<u64>(changetype<usize>(src), HEADER_SIZE);\r\n        let out = changetype<usize>(dest) + (destOffset << 1);\r\n        for (let i = 0; i < count; ++i) {\r\n          store<u64>(out + (i << 3), cc, HEADER_SIZE);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        let strLen = length << 1;\r\n        let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\r\n        let from = changetype<usize>(src)  + HEADER_SIZE;\r\n        for (let i = 0, len = strLen * count; i < len; i += strLen) {\r\n          memory.copy(to + i, from, strLen);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\nexport const enum CharCode {\r\n  PLUS = 0x2B,\r\n  MINUS = 0x2D,\r\n  DOT = 0x2E,\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n  A = 0x41,\r\n  B = 0x42,\r\n  E = 0x45,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  X = 0x58,\r\n  Z = 0x5a,\r\n  a = 0x61,\r\n  b = 0x62,\r\n  e = 0x65,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  x = 0x78,\r\n  z = 0x7A\r\n}\r\n\r\nexport function isWhiteSpaceOrLineTerminator(c: u16): bool {\r\n  switch (c) {\r\n    case 9:    // <TAB>\r\n    case 10:   // <LF>\r\n    case 13:   // <CR>\r\n    case 11:   // <VT>\r\n    case 12:   // <FF>\r\n    case 32:   // <SP>\r\n    case 160:  // <NBSP>\r\n    case 8232: // <LS>\r\n    case 8233: // <PS>\r\n    case 65279: return true; // <ZWNBSP>\r\n    default: return false;\r\n  }\r\n}\r\n\r\n/** Parses a string to an integer (usually), using the specified radix. */\r\nexport function parse<T>(str: String, radix: i32 = 0): T {\r\n  var len: i32 = str.length;\r\n  if (!len) return <T>NaN;\r\n\r\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\r\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\r\n\r\n  // determine sign\r\n  var sign: T;\r\n  if (code == CharCode.MINUS) {\r\n    if (!--len) return <T>NaN;\r\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\r\n    sign = -1;\r\n  } else if (code == CharCode.PLUS) {\r\n    if (!--len) return <T>NaN;\r\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\r\n    sign = 1;\r\n  } else {\r\n    sign = 1;\r\n  }\r\n\r\n  // determine radix\r\n  if (!radix) {\r\n    if (code == CharCode._0 && len > 2) {\r\n      switch (<i32>load<u16>(ptr + 2, HEADER_SIZE)) {\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          ptr += 4; len -= 2;\r\n          radix = 2;\r\n          break;\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          ptr += 4; len -= 2;\r\n          radix = 8;\r\n          break;\r\n        }\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          ptr += 4; len -= 2;\r\n          radix = 16;\r\n          break;\r\n        }\r\n        default: radix = 10;\r\n      }\r\n    } else radix = 10;\r\n  } else if (radix < 2 || radix > 36) {\r\n    return <T>NaN;\r\n  }\r\n\r\n  // calculate value\r\n  var num: T = 0;\r\n  while (len--) {\r\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\r\n    if (code >= CharCode._0 && code <= CharCode._9) {\r\n      code -= CharCode._0;\r\n    } else if (code >= CharCode.A && code <= CharCode.Z) {\r\n      code -= CharCode.A - 10;\r\n    } else if (code >= CharCode.a && code <= CharCode.z) {\r\n      code -= CharCode.a - 10;\r\n    } else break;\r\n    if (code >= radix) break;\r\n    num = (num * radix) + code;\r\n    ptr += 2;\r\n  }\r\n  return sign * num;\r\n}\r\n","import {\r\n  HEADER_SIZE,\r\n  MAX_LENGTH,\r\n  allocateUnsafe,\r\n  compareUnsafe,\r\n  repeatUnsafe,\r\n  copyUnsafe,\r\n  isWhiteSpaceOrLineTerminator,\r\n  CharCode,\r\n  parse\r\n} from \"./internal/string\";\r\n\r\nimport {\r\n  STORE\r\n} from \"./internal/arraybuffer\";\r\n\r\n@sealed\r\nexport class String {\r\n\r\n  readonly length: i32; // capped to [0, MAX_LENGTH]\r\n\r\n  // TODO Add and handle second argument\r\n  static fromCharCode(code: i32): String {\r\n    var out = allocateUnsafe(1);\r\n    store<u16>(\r\n      changetype<usize>(out),\r\n      <u16>code,\r\n      HEADER_SIZE\r\n    );\r\n    return out;\r\n  }\r\n\r\n  static fromCodePoint(code: i32): String {\r\n    assert(<u32>code <= 0x10FFFF);\r\n    var sur = code > 0xFFFF;\r\n    var out = allocateUnsafe(<i32>sur + 1);\r\n    if (!sur) {\r\n      store<u16>(\r\n        changetype<usize>(out),\r\n        <u16>code,\r\n        HEADER_SIZE\r\n      );\r\n    } else {\r\n      code -= 0x10000;\r\n      let hi: u32 = (code >>> 10)  + 0xD800;\r\n      let lo: u32 = (code & 0x3FF) + 0xDC00;\r\n      store<u32>(\r\n        changetype<usize>(out),\r\n        (hi << 16) | lo,\r\n        HEADER_SIZE\r\n      );\r\n    }\r\n    return out;\r\n  }\r\n\r\n  @operator(\"[]\")\r\n  charAt(pos: i32): String {\r\n    assert(this !== null);\r\n\r\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\r\n\r\n    var out = allocateUnsafe(1);\r\n    store<u16>(\r\n      changetype<usize>(out),\r\n      load<u16>(\r\n        changetype<usize>(this) + (<usize>pos << 1),\r\n        HEADER_SIZE\r\n      ),\r\n      HEADER_SIZE\r\n    );\r\n    return out;\r\n  }\r\n\r\n  charCodeAt(pos: i32): i32 {\r\n    assert(this !== null);\r\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\r\n\r\n    return load<u16>(\r\n      changetype<usize>(this) + (<usize>pos << 1),\r\n      HEADER_SIZE\r\n    );\r\n  }\r\n\r\n  codePointAt(pos: i32): i32 {\r\n    assert(this !== null);\r\n    if (<u32>pos >= <u32>this.length) return -1; // (undefined)\r\n\r\n    var first = <i32>load<u16>(\r\n      changetype<usize>(this) + (<usize>pos << 1),\r\n      HEADER_SIZE\r\n    );\r\n    if (first < 0xD800 || first > 0xDBFF || pos + 1 == this.length) {\r\n      return first;\r\n    }\r\n    var second = <i32>load<u16>(\r\n      changetype<usize>(this) + ((<usize>pos + 1) << 1),\r\n      HEADER_SIZE\r\n    );\r\n    if (second < 0xDC00 || second > 0xDFFF) return first;\r\n    return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\r\n  }\r\n\r\n  @operator(\"+\")\r\n  private static __concat(left: String, right: String): String {\r\n    if (!changetype<usize>(left)) left = changetype<String>(\"null\");\r\n    return left.concat(right);\r\n  }\r\n\r\n  concat(other: String): String {\r\n    assert(this !== null);\r\n    if (other === null) other = changetype<String>(\"null\");\r\n\r\n    var thisLen: isize = this.length;\r\n    var otherLen: isize = other.length;\r\n    var outLen: usize = thisLen + otherLen;\r\n    if (outLen == 0) return changetype<String>(\"\");\r\n    var out = allocateUnsafe(outLen);\r\n    copyUnsafe(out, 0, this, 0, thisLen);\r\n    copyUnsafe(out, thisLen, other, 0, otherLen);\r\n    return out;\r\n  }\r\n\r\n  endsWith(searchString: String, endPosition: i32 = MAX_LENGTH): bool {\r\n    assert(this !== null);\r\n    if (searchString === null) return false;\r\n    var end = min(max(endPosition, 0), this.length);\r\n    var searchLength: isize = searchString.length;\r\n    var start: isize = end - searchLength;\r\n    if (start < 0) return false;\r\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\r\n  }\r\n\r\n  @operator(\"==\")\r\n  private static __eq(left: String, right: String): bool {\r\n    if (left === right) return true;\r\n    if (left === null || right === null) return false;\r\n\r\n    var leftLength = left.length;\r\n    if (leftLength != right.length) return false;\r\n\r\n    return !compareUnsafe(left, 0, right, 0, leftLength);\r\n  }\r\n\r\n  @operator(\"!=\")\r\n  private static __ne(left: String, right: String): bool {\r\n    return !this.__eq(left, right);\r\n  }\r\n\r\n  @operator(\">\")\r\n  private static __gt(left: String, right: String): bool {\r\n    if (left === right || left === null || right === null) return false;\r\n\r\n    var leftLength  = left.length;\r\n    var rightLength = right.length;\r\n\r\n    if (!leftLength)  return false;\r\n    if (!rightLength) return true;\r\n\r\n    var length = <usize>min<i32>(leftLength, rightLength);\r\n    return compareUnsafe(left, 0, right, 0, length) > 0;\r\n  }\r\n\r\n  @operator(\">=\")\r\n  private static __gte(left: String, right: String): bool {\r\n    if (left === right) return true;\r\n    if (left === null || right === null) return false;\r\n\r\n    var leftLength  = left.length;\r\n    var rightLength = right.length;\r\n\r\n    if (!leftLength)  return !rightLength;\r\n    if (!rightLength) return true;\r\n\r\n    var length = <usize>min<i32>(leftLength, rightLength);\r\n    return compareUnsafe(left, 0, right, 0, length) >= 0;\r\n  }\r\n\r\n  @operator(\"<\")\r\n  private static __lt(left: String, right: String): bool {\r\n    if (left === right || left === null || right === null) return false;\r\n\r\n    var leftLength  = left.length;\r\n    var rightLength = right.length;\r\n\r\n    if (!rightLength) return false;\r\n    if (!leftLength)  return true;\r\n\r\n    var length = <usize>min<i32>(leftLength, rightLength);\r\n    return compareUnsafe(left, 0, right, 0, length) < 0;\r\n  }\r\n\r\n  @operator(\"<=\")\r\n  private static __lte(left: String, right: String): bool {\r\n    if (left === right) return true;\r\n    if (left === null || right === null) return false;\r\n\r\n    var leftLength  = left.length;\r\n    var rightLength = right.length;\r\n\r\n    if (!rightLength) return !leftLength;\r\n    if (!leftLength)  return true;\r\n\r\n    var length = <usize>min<i32>(leftLength, rightLength);\r\n    return compareUnsafe(left, 0, right, 0, length) <= 0;\r\n  }\r\n\r\n  @inline\r\n  includes(searchString: String, position: i32 = 0): bool {\r\n    return this.indexOf(searchString, position) != -1;\r\n  }\r\n\r\n  indexOf(searchString: String, fromIndex: i32 = 0): i32 {\r\n    assert(this !== null);\r\n    if (searchString === null) searchString = changetype<String>(\"null\");\r\n\r\n    var searchLen: isize = searchString.length;\r\n    if (!searchLen) return 0;\r\n    var len: isize = this.length;\r\n    if (!len) return -1;\r\n    var start = min<isize>(max<isize>(fromIndex, 0), len);\r\n    len -= searchLen;\r\n    for (let k: isize = start; k <= len; ++k) {\r\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  lastIndexOf(searchString: String, fromIndex: i32 = i32.MAX_VALUE): i32 {\r\n    assert(this !== null);\r\n    if (searchString === null) searchString = changetype<String>(\"null\");\r\n\r\n    var len: isize = this.length;\r\n    var searchLen: isize = searchString.length;\r\n    if (!searchLen) return len;\r\n    if (!len) return -1;\r\n    var start = min<isize>(max(fromIndex, 0), len - searchLen);\r\n    for (let k = start; k >= 0; --k) {\r\n      if (!compareUnsafe(this, k, searchString, 0, searchLen)) return <i32>k;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  startsWith(searchString: String, position: i32 = 0): bool {\r\n    assert(this !== null);\r\n    if (searchString === null) searchString = changetype<String>(\"null\");\r\n\r\n    var pos: isize = position;\r\n    var len: isize = this.length;\r\n    var start = min(max(pos, 0), len);\r\n    var searchLength: isize = searchString.length;\r\n    if (searchLength + start > len) return false;\r\n    return !compareUnsafe(this, start, searchString, 0, searchLength);\r\n  }\r\n\r\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String {\r\n    assert(this !== null);\r\n    var intStart: isize = start;\r\n    var end: isize = length;\r\n    var size: isize = this.length;\r\n    if (intStart < 0) intStart = max(size + intStart, 0);\r\n    var resultLength = min(max(end, 0), size - intStart);\r\n    if (resultLength <= 0) return changetype<String>(\"\");\r\n    var out = allocateUnsafe(resultLength);\r\n    copyUnsafe(out, 0, this, intStart, resultLength);\r\n    return out;\r\n  }\r\n\r\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\r\n    assert(this !== null);\r\n    var len = this.length;\r\n    var finalStart = min(max(start, 0), len);\r\n    var finalEnd = min(max(end, 0), len);\r\n    var from = min<i32>(finalStart, finalEnd);\r\n    var to = max<i32>(finalStart, finalEnd);\r\n    len = to - from;\r\n    if (!len) return changetype<String>(\"\");\r\n    if (!from && to == this.length) return this;\r\n    var out = allocateUnsafe(len);\r\n    copyUnsafe(out, 0, this, from, len);\r\n    return out;\r\n  }\r\n\r\n  trim(): String {\r\n    assert(this !== null);\r\n    var length: usize = this.length;\r\n\r\n    while (\r\n      length &&\r\n      isWhiteSpaceOrLineTerminator(\r\n        load<u16>(changetype<usize>(this) + (length << 1), HEADER_SIZE)\r\n      )\r\n    ) {\r\n      --length;\r\n    }\r\n    var start: usize = 0;\r\n    while (\r\n      start < length &&\r\n      isWhiteSpaceOrLineTerminator(\r\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\r\n      )\r\n    ) {\r\n      ++start, --length;\r\n    }\r\n    if (!length) return changetype<String>(\"\");\r\n    if (!start && length == this.length) return this;\r\n    var out = allocateUnsafe(length);\r\n    copyUnsafe(out, 0, this, start, length);\r\n    return out;\r\n  }\r\n\r\n  @inline\r\n  trimLeft(): String {\r\n    return this.trimStart();\r\n  }\r\n\r\n  @inline\r\n  trimRight(): String {\r\n    return this.trimEnd();\r\n  }\r\n\r\n  trimStart(): String {\r\n    assert(this !== null);\r\n    var start: isize = 0;\r\n    var len: isize = this.length;\r\n    while (\r\n      start < len &&\r\n      isWhiteSpaceOrLineTerminator(\r\n        load<u16>(changetype<usize>(this) + (start << 1), HEADER_SIZE)\r\n      )\r\n    ) {\r\n      ++start;\r\n    }\r\n    if (!start) return this;\r\n    var outLen = len - start;\r\n    if (!outLen) return changetype<String>(\"\");\r\n    var out = allocateUnsafe(outLen);\r\n    copyUnsafe(out, 0, this, start, outLen);\r\n    return out;\r\n  }\r\n\r\n  trimEnd(): String {\r\n    assert(this !== null);\r\n    var len: isize = this.length;\r\n    while (\r\n      len > 0 &&\r\n      isWhiteSpaceOrLineTerminator(\r\n        load<u16>(changetype<usize>(this) + (len << 1), HEADER_SIZE)\r\n      )\r\n    ) {\r\n      --len;\r\n    }\r\n    if (len <= 0) return changetype<String>(\"\");\r\n    if (<i32>len == this.length) return this;\r\n    var out = allocateUnsafe(len);\r\n    copyUnsafe(out, 0, this, 0, len);\r\n    return out;\r\n  }\r\n\r\n  padStart(targetLength: i32, padString: String = changetype<String>(\" \")): String {\r\n    assert(this !== null);\r\n    var length = this.length;\r\n    var padLen = padString.length;\r\n    if (targetLength < length || !padLen) return this;\r\n    var len = targetLength - length;\r\n    var out = allocateUnsafe(targetLength);\r\n    if (len > padLen) {\r\n      let count = (len - 1) / padLen;\r\n      let base  = count * padLen;\r\n      let rest  = len - base;\r\n      repeatUnsafe(out, 0, padString, count);\r\n      if (rest) copyUnsafe(out, base, padString, 0, rest);\r\n    } else {\r\n      copyUnsafe(out, 0, padString, 0, len);\r\n    }\r\n    if (length) copyUnsafe(out, len, this, 0, length);\r\n    return out;\r\n  }\r\n\r\n  padEnd(targetLength: i32, padString: String = changetype<String>(\" \")): String {\r\n    assert(this !== null);\r\n    var length = this.length;\r\n    var padLen = padString.length;\r\n    if (targetLength < length || !padLen) return this;\r\n    var len = targetLength - length;\r\n    var out = allocateUnsafe(targetLength);\r\n    if (length) copyUnsafe(out, 0, this, 0, length);\r\n    if (len > padLen) {\r\n      let count = (len - 1) / padLen;\r\n      let base = count * padLen;\r\n      let rest = len - base;\r\n      repeatUnsafe(out, length, padString, count);\r\n      if (rest) copyUnsafe(out, base + length, padString, 0, rest);\r\n    } else {\r\n      copyUnsafe(out, length, padString, 0, len);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  repeat(count: i32 = 0): String {\r\n    assert(this !== null);\r\n    var length = this.length;\r\n\r\n    // Most browsers can't handle strings 1 << 28 chars or longer\r\n    if (count < 0 || length * count > (1 << 28)) {\r\n      throw new RangeError(\"Invalid count value\");\r\n    }\r\n\r\n    if (count == 0 || !length) return changetype<String>(\"\");\r\n    if (count == 1) return this;\r\n\r\n    var result = allocateUnsafe(length * count);\r\n    repeatUnsafe(result, 0, this, count);\r\n    return result;\r\n  }\r\n\r\n  slice(beginIndex: i32, endIndex: i32 = i32.MAX_VALUE): String {\r\n    var length = this.length;\r\n    var begin = (beginIndex < 0) ? max(beginIndex + length, 0) : min(beginIndex, length);\r\n    var end = (endIndex < 0) ? max(endIndex + length, 0) : min(endIndex, length);\r\n    var len = end - begin;\r\n    if (len <= 0) return changetype<String>(\"\");\r\n    var out = allocateUnsafe(len);\r\n    copyUnsafe(out, 0, this, begin, len);\r\n    return out;\r\n  }\r\n\r\n  split(separator: String = null, limit: i32 = i32.MAX_VALUE): String[] {\r\n    assert(this !== null);\r\n    if (!limit) return new Array<String>();\r\n    if (separator === null) return <String[]>[this];\r\n    var length: isize = this.length;\r\n    var sepLen: isize = separator.length;\r\n    if (limit < 0) limit = i32.MAX_VALUE;\r\n    if (!sepLen) {\r\n      if (!length) return new Array<String>();\r\n      // split by chars\r\n      length = min<isize>(length, <isize>limit);\r\n      let result = new Array<String>(length);\r\n      let buffer = <ArrayBuffer>result.buffer_;\r\n      for (let i: isize = 0; i < length; ++i) {\r\n        let char = allocateUnsafe(1);\r\n        store<u16>(\r\n          changetype<usize>(char),\r\n          load<u16>(\r\n            changetype<usize>(this) + (<usize>i << 1),\r\n            HEADER_SIZE\r\n          ),\r\n          HEADER_SIZE\r\n        );\r\n        STORE<String>(buffer, i, char);\r\n      }\r\n      return result;\r\n    } else if (!length) {\r\n      let result = new Array<String>(1);\r\n      unchecked(result[0] = changetype<String>(\"\"));\r\n      return result;\r\n    }\r\n    var result = new Array<String>();\r\n    var end = 0, start = 0, i = 0;\r\n    while ((end = this.indexOf(separator, start)) != -1) {\r\n      let len = end - start;\r\n      if (len > 0) {\r\n        let out = allocateUnsafe(len);\r\n        copyUnsafe(out, 0, this, start, len);\r\n        result.push(out);\r\n      } else {\r\n        result.push(changetype<String>(\"\"));\r\n      }\r\n      if (++i == limit) return result;\r\n      start = end + sepLen;\r\n    }\r\n    if (!start) {\r\n      let result = new Array<String>(1);\r\n      unchecked(result[0] = this);\r\n      return result;\r\n    }\r\n    var len = length - start;\r\n    if (len > 0) {\r\n      let out = allocateUnsafe(len);\r\n      copyUnsafe(out, 0, this, start, len);\r\n      result.push(out);\r\n    } else {\r\n      result.push(changetype<String>(\"\"));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  toString(): String {\r\n    return this;\r\n  }\r\n\r\n  get lengthUTF8(): i32 {\r\n    var len = 1; // null terminated\r\n    var pos: usize = 0;\r\n    var end = <usize>this.length;\r\n    while (pos < end) {\r\n      let c = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\r\n      if (c < 128) {\r\n        len += 1; ++pos;\r\n      } else if (c < 2048) {\r\n        len += 2; ++pos;\r\n      } else {\r\n        if (\r\n          (c & 0xFC00) == 0xD800 && pos + 1 < end &&\r\n          (<u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE) & 0xFC00) == 0xDC00\r\n        ) {\r\n          len += 4; pos += 2;\r\n        } else {\r\n          len += 3; ++pos;\r\n        }\r\n      }\r\n    }\r\n    return len;\r\n  }\r\n\r\n  static fromUTF8(ptr: usize, len: usize): String {\r\n    if (len < 1) return changetype<String>(\"\");\r\n    var ptrPos = <usize>0;\r\n    var buf = memory.allocate(<usize>len << 1);\r\n    var bufPos = <usize>0;\r\n    while (ptrPos < len) {\r\n      let cp = <u32>load<u8>(ptr + ptrPos++);\r\n      if (cp < 128) {\r\n        store<u16>(buf + bufPos, cp);\r\n        bufPos += 2;\r\n      } else if (cp > 191 && cp < 224) {\r\n        assert(ptrPos + 1 <= len);\r\n        store<u16>(buf + bufPos, (cp & 31) << 6 | load<u8>(ptr + ptrPos++) & 63);\r\n        bufPos += 2;\r\n      } else if (cp > 239 && cp < 365) {\r\n        assert(ptrPos + 3 <= len);\r\n        cp = (\r\n          (cp                       &  7) << 18 |\r\n          (load<u8>(ptr + ptrPos++) & 63) << 12 |\r\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\r\n           load<u8>(ptr + ptrPos++) & 63\r\n        ) - 0x10000;\r\n        store<u16>(buf + bufPos, 0xD800 + (cp >> 10));\r\n        bufPos += 2;\r\n        store<u16>(buf + bufPos, 0xDC00 + (cp & 1023));\r\n        bufPos += 2;\r\n      } else {\r\n        assert(ptrPos + 2 <= len);\r\n        store<u16>(buf + bufPos,\r\n          (cp                       & 15) << 12 |\r\n          (load<u8>(ptr + ptrPos++) & 63) << 6  |\r\n           load<u8>(ptr + ptrPos++) & 63\r\n        );\r\n        bufPos += 2;\r\n      }\r\n    }\r\n    assert(ptrPos == len);\r\n    var str = allocateUnsafe(<u32>(bufPos >> 1));\r\n    memory.copy(changetype<usize>(str) + HEADER_SIZE, buf, bufPos);\r\n    memory.free(buf);\r\n    return str;\r\n  }\r\n\r\n  toUTF8(): usize {\r\n    var buf = memory.allocate(<usize>this.lengthUTF8);\r\n    var pos: usize = 0;\r\n    var end = <usize>this.length;\r\n    var off: usize = 0;\r\n    while (pos < end) {\r\n      let c1 = <u32>load<u16>(changetype<usize>(this) + (pos << 1), HEADER_SIZE);\r\n      if (c1 < 128) {\r\n        store<u8>(buf + off, c1);\r\n        ++off; ++pos;\r\n      } else if (c1 < 2048) {\r\n        let ptr = buf + off;\r\n        store<u8>(ptr, c1 >> 6      | 192);\r\n        store<u8>(ptr, c1      & 63 | 128, 1);\r\n        off += 2; ++pos;\r\n      } else {\r\n        let ptr = buf + off;\r\n        if ((c1 & 0xFC00) == 0xD800 && pos + 1 < end) {\r\n          let c2 = <u32>load<u16>(changetype<usize>(this) + ((pos + 1) << 1), HEADER_SIZE);\r\n          if ((c2 & 0xFC00) == 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            store<u8>(ptr, c1 >> 18      | 240);\r\n            store<u8>(ptr, c1 >> 12 & 63 | 128, 1);\r\n            store<u8>(ptr, c1 >> 6  & 63 | 128, 2);\r\n            store<u8>(ptr, c1       & 63 | 128, 3);\r\n            off += 4; pos += 2;\r\n            continue;\r\n          }\r\n        }\r\n        store<u8>(ptr, c1 >> 12      | 224);\r\n        store<u8>(ptr, c1 >> 6  & 63 | 128, 1);\r\n        store<u8>(ptr, c1       & 63 | 128, 2);\r\n        off += 3; ++pos;\r\n      }\r\n    }\r\n    store<u8>(buf + off, 0);\r\n    return buf;\r\n  }\r\n}\r\n\r\nexport function parseInt(str: String, radix: i32 = 0): f64 {\r\n  return parse<f64>(str, radix);\r\n}\r\n\r\nexport function parseI32(str: String, radix: i32 = 0): i32 {\r\n  return parse<i32>(str, radix);\r\n}\r\n\r\nexport function parseI64(str: String, radix: i32 = 0): i64 {\r\n  return parse<i64>(str, radix);\r\n}\r\n\r\n// FIXME: naive implementation\r\nexport function parseFloat(str: String): f64 {\r\n  var len: i32 = str.length;\r\n  if (!len) return NaN;\r\n\r\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\r\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\r\n\r\n  // determine sign\r\n  var sign: f64;\r\n  if (code == CharCode.MINUS) {\r\n    if (!--len) return NaN;\r\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\r\n    sign = -1;\r\n  } else if (code == CharCode.PLUS) {\r\n    if (!--len) return NaN;\r\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\r\n    sign = 1;\r\n  } else {\r\n    sign = 1;\r\n  }\r\n\r\n  // calculate value\r\n  var num: f64 = 0;\r\n  while (len--) {\r\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\r\n    if (code == CharCode.DOT) {\r\n      ptr += 2;\r\n      let fac: f64 = 0.1; // precision :(\r\n      while (len--) {\r\n        code = <i32>load<u16>(ptr, HEADER_SIZE);\r\n        if (code == CharCode.E || code == CharCode.e) {\r\n          assert(false); // TODO\r\n        }\r\n        code -= CharCode._0;\r\n        if (<u32>code > 9) break;\r\n        num += <f64>code * fac;\r\n        fac *= 0.1;\r\n        ptr += 2;\r\n      }\r\n      break;\r\n    }\r\n    code -= CharCode._0;\r\n    if (<u32>code >= 10) break;\r\n    num = (num * 10) + code;\r\n    ptr += 2;\r\n  }\r\n  return sign * num;\r\n}\r\n","// @ts-ignore\r\n@external(\"__canvas_sys\", \"loadImage\")\r\ndeclare function loadImage(img: Image, src: string): i32;\r\n\r\n// @ts-ignore\r\n@external(\"__canvas_sys\", \"disposeImage\")\r\ndeclare function disposeImage(id: i32): void;\r\n\r\nexport class Image {\r\n  private _id: i32 = -1;\r\n  private _width: i32 = 0;\r\n  private _height: i32 = 0;\r\n  private _loaded: bool = false;\r\n  private _src: string = \"\";\r\n\r\n  @inline\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  @inline\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  @inline\r\n  public get loaded(): bool {\r\n    return this._loaded;\r\n  }\r\n\r\n  @inline\r\n  public get src(): string {\r\n    return this._src;\r\n  }\r\n\r\n  public set src(value: string) {\r\n    this._src = value;\r\n    this._id = loadImage(this, value);\r\n  }\r\n\r\n  public dispose(): void {\r\n    disposeImage(this._id);\r\n  }\r\n}\r\n\r\nexport function __image_loaded(img: Image, width: i32, height: i32): void {\r\n  store<i32>(changetype<usize>(img) + offsetof<Image>(\"_width\"), width);\r\n  store<i32>(changetype<usize>(img) + offsetof<Image>(\"_height\"), height);\r\n  store<bool>(changetype<usize>(img) + offsetof<Image>(\"_loaded\"), true);\r\n}\r\n\r\n/**\r\n * Gets the image's external id.\r\n *\r\n * @param image - The target image.\r\n */\r\n// @ts-ignore: @inline is valid on regular functions\r\n@inline\r\nexport function getImageID(image: Image): i32 {\r\n  return load<i32>(changetype<usize>(image) + offsetof<Image>(\"_id\"));\r\n}\r\n","import \"allocator/arena\";\r\nimport {\r\n  Buffer,\r\n  CanvasRenderingContext2D,\r\n  getContextById,\r\n} from \"./index\";\r\n\r\nvar ctx: CanvasRenderingContext2D;\r\n\r\nclass Writer extends Buffer<f64> {\r\n  writeTest(): void {\r\n    this._writeTwo(0, 1, 2);\r\n  }\r\n}\r\n\r\nvar buff: Writer = new Writer();\r\nexport function init(): void {\r\n  ctx = getContextById(\"main\");\r\n}\r\n\r\nexport function writeThreeTimes(): usize {\r\n  buff.writeTest();\r\n  return changetype<usize>(buff) + offsetof<Writer>(\"_buffer\");\r\n}\r\n"]}